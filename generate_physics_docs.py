#!/usr/bin/env python3
"""Generate docs/physics.md from bh_spectra.physics docstrings without imports."""
import ast
import tokenize
from pathlib import Path
import textwrap


def extract_docs(py_path: Path):
    # Respect the source file's declared encoding (PEP 263)
    with tokenize.open(py_path) as f:
        src = f.read()
    tree = ast.parse(src)
    docs = {}
    class_name = None
    for node in tree.body:
        if isinstance(node, ast.ClassDef) and node.name == "BHModel":
            class_name = node.name
            docs[class_name] = ast.get_docstring(node) or ""
            for item in node.body:
                if isinstance(item, ast.FunctionDef) and not item.name.startswith("_"):
                    docs[item.name] = ast.get_docstring(item) or ""
    return docs


def build_markdown(docs: dict) -> str:
    lines = [
        "# Physics API\n\n",
        "Documentation extracted from docstrings in `bh_spectra.physics`.\n\n",
        "*(Auto-generated by `docs/generate_physics_docs.py`.)*\n\n",
    ]
    class_doc = docs.pop("BHModel", "")
    lines.append("## BHModel\n\n")
    if class_doc:
        lines.append(textwrap.dedent(class_doc) + "\n\n")
    for name, doc in docs.items():
        lines.append(f"### {name}\n\n")
        lines.append(textwrap.dedent(doc) + "\n\n")
    return "".join(lines)


def main():
    src_path = (
        Path(__file__).resolve().parent.parent / "src" / "bh_spectra" / "physics.py"
    )
    docs = extract_docs(src_path)
    out_path = Path(__file__).resolve().parent / "physics.md"
    out_path.write_text(build_markdown(docs), encoding="utf-8")
    print(f"Wrote {out_path}")


if __name__ == "__main__":
    main()
