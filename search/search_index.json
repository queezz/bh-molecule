{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"BH Molecule","text":"<p>This project provides tools to model and fit the A\u2013X band spectra of boron hydride (BH). It began life as a set of Jupyter notebooks and has since been refactored into a Python package.</p>"},{"location":"#installation","title":"Installation","text":"<p>You can install BH Molecule locally or directly from GitHub. Both methods will make the CLI commands (<code>bh-spectra</code>, <code>bh-spectra-csv</code>, <code>bh-spectra-plot</code>) available in your terminal.</p> <p>From a cloned repository:</p> <p><pre><code>pip install .\n</code></pre> Or, fordevelopment: <pre><code>pip install -e .\n</code></pre></p> <p>See the Dev Install Guide for more details.</p> <p>Directly from GitHub:</p> <pre><code>pip install git+https://github.com/queezz/bh-molecule.git\n</code></pre> <p>After installation, try:</p> <pre><code>bh-spectra --xmin 432.8 --xmax 434.2 --points 4000 --out spectrum.npz\n</code></pre>"},{"location":"#quick-start","title":"Quick start","text":"<p>Use the Python API:</p> <p>Python example:</p> <pre><code>import numpy as np\nfrom bh_molecule.dataio import load_v00_wavelengths\nfrom bh_molecule.physics import BHModel\n\nmodel = BHModel(load_v00_wavelengths())\nx = np.linspace(432.8, 434.2, 4000)\ny = model.full_fit_model(x, C=1.0, T_rot=2000, dx=0.0, w_inst=0.02)\n</code></pre>"},{"location":"cli_commands/","title":"BH-Molecule CLI Commands","text":"<p>The BH-Molecule package provides three main command-line tools for generating, exporting, and plotting model spectra of the boron hydride (BH) A\u2013X band.</p>"},{"location":"cli_commands/#installation","title":"Installation","text":"<p>To use the commands, you need to install the package. See the Installation section.</p> <ul> <li><code>bh-spectra</code></li> <li><code>bh-spectra-csv</code></li> <li><code>bh-spectra-plot</code></li> </ul>"},{"location":"cli_commands/#common-parameters","title":"Common Parameters","text":"<p>All three commands share a set of parameters controlling the generated spectrum:</p> Parameter Type Default Description <code>--xmin</code> float 432.8 Minimum wavelength in nm <code>--xmax</code> float 434.2 Maximum wavelength in nm <code>--points</code> int 4000 Number of wavelength points <code>--C</code> float 1.0 Concentration factor <code>--T_rot</code> float 2000.0 Rotational temperature in K <code>--dx</code> float 0.0 Wavelength shift in nm <code>--w_inst</code> float 0.02 Instrumental FWHM in nm <code>--base</code> float 0.0 Baseline offset <code>--I_R7</code> float 0.5 Intensity of R\u2087 branch line <code>--I_R8</code> float 0.3 Intensity of R\u2088 branch line"},{"location":"cli_commands/#generate-spectrum-data","title":"Generate Spectrum Data","text":""},{"location":"cli_commands/#bh-spectra","title":"<code>bh-spectra</code>","text":"<p>Generates model spectrum and saves it as a compressed NumPy file (<code>.npz</code>).</p> <pre><code>bh-spectra --C 5.0 --T_rot 3500 --out spectrum.npz\n</code></pre> <p>Options:</p> <ul> <li><code>--out</code>: Output file name (default: <code>spectrum.npz</code>)</li> </ul> <p>Example:</p> <pre><code>bh-spectra --xmin 433.0 --xmax 434.0 --points 2000 --C 2.0 --T_rot 2500 --out my_spectrum.npz\n</code></pre>"},{"location":"cli_commands/#bh-spectra-csv","title":"<code>bh-spectra-csv</code>","text":"<p>Same as <code>bh-spectra</code> but outputs a CSV file instead of NumPy.</p> <pre><code>bh-spectra-csv --C 5.0 --T_rot 3500 --out spectrum.csv\n</code></pre> <p>Options:</p> <ul> <li><code>--out</code>: Output CSV filename (default: <code>spectrum.csv</code>)</li> </ul> <p>The resulting CSV will have columns:</p> <ul> <li><code>x</code> \u2014 Wavelength (nm)</li> <li><code>y</code> \u2014 Intensity (a.u.)</li> </ul>"},{"location":"cli_commands/#plot-spectrum","title":"Plot Spectrum","text":"<p>Generates and displays a spectrum plot using Matplotlib.</p> <pre><code>bh-spectra-plot --C 5.0 --T_rot 3500\n</code></pre> <p>Additional options:</p> <ul> <li><code>--save</code>: Save plot to file (e.g. <code>plot.png</code>)</li> <li><code>--dpi</code>: Resolution when saving (default: 100)</li> <li><code>--figsize</code>: Width and height in inches (default: <code>10 6</code>)</li> </ul>"},{"location":"cli_commands/#example-workflow","title":"Example Workflow","text":"<ol> <li> <p>Generate spectrum data <pre><code>bh-spectra --C 4.0 --T_rot 3200 --out data.npz\n</code></pre></p> </li> <li> <p>Export same parameters to CSV <pre><code>bh-spectra-csv --C 4.0 --T_rot 3200 --out data.csv\n</code></pre></p> </li> <li> <p>Visualize spectrum <pre><code>bh-spectra-plot --C 4.0 --T_rot 3200 --save plot.png --dpi 200\n</code></pre></p> </li> </ol>"},{"location":"cli_commands/#notes","title":"Notes","text":"<ul> <li>The BH-Spectra CLI tools are based on the BHModel class and use molecular constants loaded via <code>load_v00_wavelengths()</code>.</li> <li>Adjusting <code>C</code>, <code>T_rot</code>, and <code>w_inst</code> has the most visible effect on spectrum shape.</li> </ul>"},{"location":"dev-install-guide/","title":"Dev Environment &amp; MkDocs","text":"<p>This page is the single source of truth for setting up a local development environment for <code>bh-molecule</code> and running the docs site.</p>"},{"location":"dev-install-guide/#part-a-dev-environment","title":"Part A \u2014 Dev Environment","text":"<p>How to prepare your venv, install the package in editable mode, and set up Jupyter.</p>"},{"location":"dev-install-guide/#a1-prerequisites","title":"A1. Prerequisites","text":"<p>Python 3.10+, Git, and VS Code (recommended) or your preferred editor.  </p> <p>We isolate everything in <code>.venv/</code>.</p>"},{"location":"dev-install-guide/#a2-create-activate-venv","title":"A2. Create &amp; activate venv","text":"<p>Windows (PowerShell) <pre><code>python -m venv .venv\n.\\\\.venv\\\\Scripts\\\\Activate.ps1\npython -m pip install -U pip\n</code></pre></p> <p>macOS / Linux (bash)</p> <pre><code>python3 -m venv .venv\nsource .venv/bin/activate\npython -m pip install -U pip\n</code></pre> <p>If blocked on Windows: <code>Set-ExecutionPolicy -Scope CurrentUser RemoteSigned</code></p>"},{"location":"dev-install-guide/#a3-editable-install","title":"A3. Editable install","text":"<p>From repo root:</p> <pre><code>python -m pip install -e \".[dev]\"\n</code></pre> <p>Imports will work anywhere, and file edits are picked up automatically.</p>"},{"location":"dev-install-guide/#a4-jupyter-setup","title":"A4. Jupyter setup","text":"<p>Optional, for running notebooks in <code>examples/</code>:</p> <pre><code>python -m pip install ipykernel\npython -m ipykernel install --user --name=bh-molecule --display-name=\"bh-molecule (venv)\"\n</code></pre> <p>In VS Code, pick the bh-molecule (venv) kernel.</p>"},{"location":"dev-install-guide/#a5-git-ignore","title":"A5. Git ignore","text":"<p>Add to <code>.gitignore</code> if missing:</p> <pre><code>.venv/\nsite/\n.ipynb_checkpoints/\n</code></pre>"},{"location":"dev-install-guide/#part-b-mkdocs","title":"Part B \u2014 MkDocs","text":"<p>Steps to serve or build the docs site locally.</p>"},{"location":"dev-install-guide/#b1-install-mkdocs","title":"B1. Install MkDocs","text":"<p>If <code>.[dev]</code> already installed docs deps, skip this. Otherwise:</p> <pre><code>python -m pip install mkdocs mkdocs-material pymdown-extensions\n</code></pre>"},{"location":"dev-install-guide/#b2-local-preview","title":"B2. Local preview","text":"<pre><code>mkdocs serve\n# or preview on LAN:\nmkdocs serve -a 0.0.0.0:8000\n</code></pre>"},{"location":"dev-install-guide/#b3-build-site","title":"B3. Build site","text":"<pre><code>mkdocs build\n</code></pre> <p>Outputs to <code>./site/</code> \u2014 do not commit this.</p>"},{"location":"dev-install-guide/#b4-optional-pinned-versions","title":"B4. Optional pinned versions","text":"<pre><code>python -m pip install \\\n  mkdocs==1.6.1 mkdocs-material==9.6.16 pymdown-extensions==10.16.1\n</code></pre>"},{"location":"dev-install-guide/#troubleshooting","title":"Troubleshooting","text":"<ul> <li>MkDocs not found \u2192 Activate <code>venv</code>, or use <code>python -m mkdocs serve</code></li> <li>ImportError \u2192 Check <code>pip install -e .</code> was run in this <code>venv</code>, and correct kernel selected.</li> <li>Plugin missing \u2192 Install in <code>venv</code> and update <code>mkdocs.yml</code>.</li> <li>Port in use \u2192 Change port: <code>mkdocs serve -a 127.0.0.1:8001</code>.</li> </ul>"},{"location":"dev-install-guide/#venv-update","title":"<code>venv</code> update","text":"<p>If you need to recreate the venv and Windows/VS Code won\u2019t let you delete it: 1) Switch VS Code to a different interpreter (e.g., Conda base). 2) Reload or close VS Code. 3) Delete/recreate <code>.venv</code>. 4) Switch back to the project interpreter.</p> <p>Heads-up for synced folders (Dropbox/OneDrive/Drive): If your repo lives in a synced folder and you use multiple machines, avoid putting <code>.venv/</code> inside the repo. Keep the venv outside the synced tree and point Cursor/VS Code to it. See: Using a venv outside a synced folder</p> <p>(Add <code>.venv/</code> to <code>.gitignore</code> so a local in-repo venv won\u2019t be committed.)</p>"},{"location":"dev-install-guide/#quick-daily-commands","title":"Quick daily commands","text":"<p>Windows</p> <pre><code>.\\\\.venv\\\\Scripts\\\\Activate.ps1\nmkdocs serve\n</code></pre> <p>macOS / Linux</p> <pre><code>source .venv/bin/activate\nmkdocs serve\n</code></pre>"},{"location":"phys/","title":"BH Physics Explainer","text":"<p>This page summarizes the physical model used in <code>bh_molecule.physics.BHModel</code>. It is organized by method; each section states the mathematical definition and key assumptions.</p>"},{"location":"phys/#energy","title":"<code>energy</code>","text":"<p>Rovibronic term value \\(E(v,N)\\) (in cm\u207b\u00b9) for a given electronic state, using a Dunham-like expansion truncated to cubic vibrational and quartic (centrifugal distortion) rotational terms:</p> \\[ E(v,N)=T_e + G(v) + F_v(N), \\] <p>with</p> \\[ \\begin{aligned} G(v) &amp;= \\omega_e\\,(v+\\tfrac12) \\;-\\; \\omega_e x_e\\,(v+\\tfrac12)^2 \\;+\\; \\omega_e y_e\\,(v+\\tfrac12)^3, \\\\ B_v  &amp;= B_e \\;-\\; \\alpha_e\\,(v+\\tfrac12), \\\\ D_v  &amp;= D_e \\;-\\; \\beta_e\\,(v+\\tfrac12), \\\\ F_v(N) &amp;= B_v\\,N(N+1)\\;-\\; D_v\\,[N(N+1)]^2 . \\end{aligned} \\] <p>Notes. \\(T_e\\) is the electronic term origin; \\(\\omega_e,\\omega_e x_e,\\omega_e y_e\\) are vibrational constants; \\(B_e,\\alpha_e,D_e,\\beta_e\\) are rotational and centrifugal-distortion constants, all state-specific.</p>"},{"location":"phys/#line_profile","title":"<code>line_profile</code>","text":"<p>Lines are modeled as Gaussian in wavelength with Doppler and instrumental widths added in quadrature (FWHM):</p> \\[ \\Delta\\lambda = \\sqrt{\\Delta\\lambda_D^2 + \\Delta\\lambda_{\\rm inst}^2}. \\] <p>The Doppler FWHM at temperature \\(T\\) (for emitter mass \\(m\\)) follows the standard expression</p> \\[ \\Delta\\lambda_D = \\lambda \\sqrt{\\frac{8\\ln 2\\,k_B T}{m c^2}} . \\] <p>The corresponding standard deviation is</p> \\[ \\sigma=\\frac{\\Delta\\lambda}{2\\sqrt{2\\ln 2}} , \\] <p>and the normalized profile at wavelength \\(x\\) is</p> \\[ g(x)=\\frac{1}{\\sqrt{2\\pi}\\,\\sigma}\\exp\\!\\left[-\\frac{(x-\\lambda)^2}{2\\sigma^2}\\right]. \\]"},{"location":"phys/#a_coeff","title":"<code>A_coeff</code>","text":"<p>Einstein \\(A_{ul}\\) for a rovibronic line.</p> <p>For the BH \\(A\\,^1\\Pi \\rightarrow X\\,^1\\Sigma^+\\) system, line Einstein coefficients are formed from band \\(A_{\\rm vib}(v')\\) (per upper vibrational level) and H\u00f6nl\u2013London rotational factors:</p> \\[ A_{ul}(v', N_2 \\to N_1)= \\frac{A_{\\rm vib}(v')\\, H_{\\rm HL}(N_2,\\Delta N)}{2N_2+1} \\] \\[ \\Delta N = N_2 - N_1 \\in \\{-1,0,+1\\}, \\quad H_{\\mathrm{HL}} = \\begin{cases}     N_2/2, &amp; \\Delta N = -1 \\quad (\\text{P}) \\\\     (2N_2+1)/2, &amp; \\Delta N = 0 \\quad (\\text{Q}) \\\\     (N_2+1)/2, &amp; \\Delta N = +1 \\quad (\\text{R}) \\end{cases} \\] <p>Notes. \\(H_{\\rm HL}\\) are the case-(a) factors appropriate to a \\(^{1}\\Pi \\to {}^{1}\\Sigma^+\\) transition and partition intensity among P/Q/R branches (\\(\\Delta N=-1,0,+1\\)). Electronic degeneracies, \u039b-doubling, parity, and nuclear-spin substructure are neglected here and can be incorporated via additional weights if needed.</p>"},{"location":"phys/#spectrum","title":"<code>spectrum</code>","text":"<p>For a chosen rotational branch (P/Q/R) on a wavelength grid \\(x\\), the model sums lines whose centers \\(\\lambda_{v'N_2\\to v''N_1}\\) come from tabulated wavelengths (X-state only fixes positions) while A-state level energies and populations set intensities.</p> <p>Per-line contribution near \\(\\lambda_0\\) is</p> \\[ I_\\ell(x)=\\frac{h\\nu_0}{4\\pi}\\; n'(v',N_2)\\; A_{ul}(v',N_2\\!\\to\\!N_1)\\; g_\\lambda(x), \\] <p>where</p> <p>\\(n'(v',N_2)\\) : upper-state populations (Boltzmann at \\(T_{\\rm rot}\\), scaled by an overall factor \\(C\\))</p> <p>\\(A_{ul}\\) : as above</p> <p>\\(g_\\lambda\\) : Gaussian line profile with total FWHM \\(\\Delta\\lambda\\) (Doppler + instrumental).</p> <p>The total branch spectrum is the sum over included \\((v',N_2\\to v'',N_1)\\) within specified bounds.</p>"},{"location":"phys/#full_fit_model","title":"<code>full_fit_model</code>","text":"<p>Composite model for the 433 nm window.</p> <p>The forward model used around 433 nm is the sum of:</p> <ol> <li>the BH Q-branch spectrum (as in <code>spectrum</code>, with branch fixed to Q), evaluated on a shifted grid \\(x+\\delta x\\) and rescaled numerically by \\(10^8\\) for conditioning, plus</li> <li>two auxiliary Gaussian lines at fixed wavelengths \\(\\lambda_{R7}=433.64776244\\,\\mathrm{nm}\\) and \\(\\lambda_{R8}=433.33500584\\,\\mathrm{nm}\\) with amplitudes \\(I_{R7}, I_{R8}\\) and the same instrumental width as the BH part (Doppler set to zero for these), and</li> <li>a constant baseline \\(b\\).</li> </ol> <p>Putting it together:</p> \\[ \\begin{aligned} y(x) ={}&amp;  10^{8}\\,S_{\\mathrm{Q}}\\!\\left(x+\\delta x;\\, C, T_{\\mathrm{rot}}, w_{\\mathrm{inst}}\\right) \\\\ &amp; {}+ I_{R7}\\, g\\!\\left(x; \\lambda_{R7}, w_{\\mathrm{inst}}\\right) \\\\ &amp;      {}+ I_{R8}\\, g\\!\\left(x; \\lambda_{R8}, w_{\\mathrm{inst}}\\right) + b. \\end{aligned} \\] <p>Notes. The X-state affects only line centers (via tables). If Doppler broadening is also required for the auxiliary features, replace their \\(g\\) with the full Doppler + instrument \\(\\Delta\\lambda\\).</p>"},{"location":"venv-outside-synced-folders/","title":"Using a venv outside a synced folder (Dropbox/OneDrive/Google Drive)","text":"<p>If you keep your repo inside a synced folder, excluding <code>.venv/</code> can be unreliable or annoying. Easiest fix: create the virtual environment outside the synced tree and point your tools to it.</p> <p>This page shows how.</p>"},{"location":"venv-outside-synced-folders/#tldr","title":"TL;DR","text":"<ul> <li>Put venvs in a local directory (e.g. <code>~/.venvs</code> or <code>C:\\Users\\&lt;you&gt;\\.venvs</code>).</li> <li>Create/activate the venv there.</li> <li>Tell Cursor/VS Code to use that interpreter.</li> <li>Keep <code>.venv/</code> in <code>.gitignore</code> in case someone creates one inside the repo.</li> </ul>"},{"location":"venv-outside-synced-folders/#create-activate-the-venv","title":"Create &amp; activate the venv","text":""},{"location":"venv-outside-synced-folders/#windows-powershell","title":"Windows (PowerShell)","text":"<p>1) Pick a home for all your venvs</p> <pre><code>$ENV_DIR = \"$env:USERPROFILE\\.venvs\"\nNew-Item -ItemType Directory -Force $ENV_DIR | Out-Null\n</code></pre> <p>2) Create the venv (choose ONE of these)</p> <p>Option A \u2014 with the Python launcher:</p> <pre><code>py -3.12 -m venv \"$ENV_DIR\\bh-molecule\"\n</code></pre> <p>Option B \u2014 with <code>python</code>:</p> <pre><code>python -m venv \"$ENV_DIR\\bh-molecule\"\n</code></pre> <p>3) Activate</p> <pre><code>&amp; \"$ENV_DIR\\bh-molecule\\Scripts\\Activate.ps1\"\n</code></pre> <p>4) Upgrade pip</p> <pre><code>python -m pip install -U pip\n</code></pre> <p>5) Install this project (dev extras)</p> <pre><code>python -m pip install -e \".[dev]\"\n</code></pre> <p>If activation is blocked on Windows, run once:</p> <pre><code>Set-ExecutionPolicy -Scope CurrentUser RemoteSigned\n</code></pre>"},{"location":"venv-outside-synced-folders/#macos-linux","title":"macOS / Linux","text":"<pre><code>ENV_DIR=\"$HOME/.venvs\"\nmkdir -p \"$ENV_DIR\"\n\npython3 -m venv \"$ENV_DIR/bh-molecule\"\nsource \"$ENV_DIR/bh-molecule/bin/activate\"\n\npython -m pip install -U pip\npython -m pip install -e \".[dev]\"\n</code></pre> <p>Deactivate any time:</p> <pre><code>deactivate\n</code></pre>"},{"location":"venv-outside-synced-folders/#point-ide-to-the-external-venv","title":"Point IDE to the external venv","text":"<ol> <li>Ctrl+Shift+P \u2192 \u201cPython: Select Interpreter\u201d \u2192 \u201cEnter interpreter path\u201d</li> </ol> <ul> <li>Windows:      <code>C:\\Users\\&lt;you&gt;\\.venvs\\bh-molecule\\Scripts\\python.exe</code></li> <li>macOS/Linux:      <code>/Users/&lt;you&gt;/.venvs/bh-molecule/bin/python</code></li> </ul> <ol> <li>Persist for this workspace (recommended):</li> </ol> <p>Create <code>.vscode/settings.json</code>:</p> <p>Windows</p> <pre><code>{\n  \"python.defaultInterpreterPath\": \"${env:USERPROFILE}\\\\.venvs\\\\bh-molecule\\\\Scripts\\\\python.exe\",\n  \"python.terminal.activateEnvironment\": true\n}\n</code></pre> <p>macOS/Linux</p> <pre><code>{\n  \"python.defaultInterpreterPath\": \"${env:HOME}/.venvs/bh-molecule/bin/python\",\n  \"python.terminal.activateEnvironment\": true\n}\n</code></pre> <p>(Optional) Make external venvs auto-discoverable in the picker:</p> <ul> <li>Windows (User Settings): <code>\"python.venvPath\": \"C:\\\\Users\\\\&lt;you&gt;\\\\.venvs\"</code></li> <li>macOS/Linux (User Settings): <code>\"python.venvPath\": \"~/.venvs\"</code></li> </ul>"},{"location":"venv-outside-synced-folders/#jupyter-notebooks-in-cursor","title":"Jupyter notebooks in Cursor","text":"<ul> <li>Kernel picker \u2192 Select Another Kernel \u2192 Python Environments \u2192 choose the same venv,   or run \u201cPython: Select Interpreter to start Jupyter server\u201d and pick it.</li> </ul>"},{"location":"venv-outside-synced-folders/#common-tasks","title":"Common tasks","text":"<p>Install/upgrade project deps:</p> <pre><code>python -m pip install -U pip\npython -m pip install -e \".[dev]\"\n</code></pre> <p>Add a package:</p> <pre><code>python -m pip install &lt;package&gt;\n# Then record it in pyproject (e.g., optional-dependencies.dev) if needed.\n</code></pre> <p>Freeze (for debugging):</p> <pre><code>python -m pip freeze &gt; freeze.txt\n</code></pre>"},{"location":"venv-outside-synced-folders/#recreate-the-environment","title":"Recreate the environment","text":"<p>If things drift, rebuild quickly:</p> <p>Windows</p> <pre><code>Remove-Item -Recurse -Force \"$env:USERPROFILE\\.venvs\\bh-molecule\"\npython -m venv \"$env:USERPROFILE\\.venvs\\bh-molecule\"\n&amp; \"$env:USERPROFILE\\.venvs\\bh-molecule\\Scripts\\Activate.ps1\"\npython -m pip install -U pip\npython -m pip install -e \".[dev]\"\n</code></pre> <p>macOS / Linux</p> <pre><code>rm -rf \"$HOME/.venvs/bh-molecule\"\npython3 -m venv \"$HOME/.venvs/bh-molecule\"\nsource \"$HOME/.venvs/bh-molecule/bin/activate\"\npython -m pip install -U pip\npython -m pip install -e \".[dev]\"\n</code></pre>"},{"location":"venv-outside-synced-folders/#notes-gotchas","title":"Notes &amp; gotchas","text":"<ul> <li>Synced folders: keeping venvs outside avoids sync noise and conflicts (Dropbox/OneDrive/Drive).</li> <li>.gitignore: add <code>.venv/</code> so a local in-repo venv never gets committed:</li> </ul> <p><pre><code>.venv/\n</code></pre> * Windows execution policy: if activation is blocked, run once:</p> <p><pre><code>Set-ExecutionPolicy -Scope CurrentUser RemoteSigned\n</code></pre> * Multiple machines: each machine should have its own venv; reinstall with <code>-e \".[dev]\"</code>.</p>"},{"location":"api/constants/","title":"constants.py API","text":""},{"location":"api/constants/#bh_molecule.constants","title":"<code>bh_molecule.constants</code>","text":"<p>Molecular constants for BH A\u2013X system (units: cm^-1).</p> <p>This module defines a typed container <code>MolecularConstants</code> and the preset parameter sets <code>BH_X</code> (X^1\u03a3^+) and <code>BH_A</code> (A^1\u03a0).</p> <p>The field names are explicit for learners (e.g., <code>omega_e_x_e</code>) and come with spectroscopy-friendly aliases (<code>we</code>, <code>wexe</code>, <code>Be</code>, etc.) so both camps are happy.</p> <p>All values are in wavenumbers (cm^-1). These parameters are intended for rovibronic term-value calculations as used by <code>bh_molecule.physics.BHModel</code>.</p>"},{"location":"api/constants/#bh_molecule.constants-attributes","title":"Attributes","text":""},{"location":"api/constants/#bh_molecule.constants.BH_A","title":"<code>BH_A = MolecularConstants(T_e=23135.8, omega_e=2250.9, omega_e_x_e=56.66, omega_e_y_e=(-15.83), B_e=12.295, alpha_e=0.8346, D_e=0.001451, beta_e=0.0)</code>  <code>module-attribute</code>","text":""},{"location":"api/constants/#bh_molecule.constants.BH_CONSTANTS","title":"<code>BH_CONSTANTS: Dict[str, MolecularConstants] = {'X': BH_X, 'A': BH_A}</code>  <code>module-attribute</code>","text":""},{"location":"api/constants/#bh_molecule.constants.BH_X","title":"<code>BH_X = MolecularConstants(T_e=0.0, omega_e=2366.9, omega_e_x_e=49.39, omega_e_y_e=0.364, B_e=12.021, alpha_e=0.412, D_e=0.001242, beta_e=(-2.6e-05))</code>  <code>module-attribute</code>","text":""},{"location":"api/constants/#bh_molecule.constants-classes","title":"Classes","text":""},{"location":"api/constants/#bh_molecule.constants.MolecularConstants","title":"<code>MolecularConstants</code>  <code>dataclass</code>","text":"<p>Dunham-like rovibrational constants (units: cm^-1).</p> <p>Parameters:</p> Name Type Description Default <code>T_e</code> <code>float</code> <p>Electronic term origin.</p> required <code>omega_e</code> <code>float</code> <p>Harmonic vibrational constant (\u03c9_e).</p> required <code>omega_e_x_e</code> <code>float</code> <p>Anharmonicity (\u03c9_e x_e).</p> required <code>omega_e_y_e</code> <code>float</code> <p>Higher-order anharmonicity (\u03c9_e y_e).</p> required <code>B_e</code> <code>float</code> <p>Rotational constant at equilibrium (B_e).</p> required <code>alpha_e</code> <code>float</code> <p>Rotation\u2013vibration coupling (\u03b1_e).</p> required <code>D_e</code> <code>float</code> <p>Centrifugal distortion (D_e).</p> required <code>beta_e</code> <code>float</code> <p>Vibration dependence of D_e (\u03b2_e).</p> required <p>Attributes:</p> Name Type Description <code>Te</code> <code>float</code> <p>Alias of T_e.</p> <code>we</code> <code>float</code> <p>Alias of omega_e.</p> <code>wexe</code> <code>float</code> <p>Alias of omega_e_x_e.</p> <code>weye</code> <code>float</code> <p>Alias of omega_e_y_e.</p> <code>Be</code> <code>float</code> <p>Alias of B_e.</p> <code>De</code> <code>float</code> <p>Alias of D_e.</p> <code>alphae</code> <code>float</code> <p>Alias of alpha_e.</p> <code>betae</code> <code>float</code> <p>Alias of beta_e.</p>"},{"location":"api/constants/#bh_molecule.constants.MolecularConstants-attributes","title":"Attributes","text":""},{"location":"api/constants/#bh_molecule.constants.MolecularConstants.B_e","title":"<code>B_e: float = field(metadata={'unit': 'cm^-1', 'desc': 'Rotational const at equilibrium (B_e)'})</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"api/constants/#bh_molecule.constants.MolecularConstants.Be","title":"<code>Be: float</code>  <code>property</code>","text":""},{"location":"api/constants/#bh_molecule.constants.MolecularConstants.D_e","title":"<code>D_e: float = field(metadata={'unit': 'cm^-1', 'desc': 'Centrifugal distortion (D_e)'})</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"api/constants/#bh_molecule.constants.MolecularConstants.De","title":"<code>De: float</code>  <code>property</code>","text":""},{"location":"api/constants/#bh_molecule.constants.MolecularConstants.T_e","title":"<code>T_e: float = field(metadata={'unit': 'cm^-1', 'desc': 'Electronic term origin (T_e)'})</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"api/constants/#bh_molecule.constants.MolecularConstants.Te","title":"<code>Te: float</code>  <code>property</code>","text":""},{"location":"api/constants/#bh_molecule.constants.MolecularConstants.alpha_e","title":"<code>alpha_e: float = field(metadata={'unit': 'cm^-1', 'desc': 'Rotation\u2013vibration coupling (\u03b1_e)'})</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"api/constants/#bh_molecule.constants.MolecularConstants.alphae","title":"<code>alphae: float</code>  <code>property</code>","text":""},{"location":"api/constants/#bh_molecule.constants.MolecularConstants.beta_e","title":"<code>beta_e: float = field(metadata={'unit': 'cm^-1', 'desc': 'Vibration dependence of D_e (\u03b2_e)'})</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"api/constants/#bh_molecule.constants.MolecularConstants.betae","title":"<code>betae: float</code>  <code>property</code>","text":""},{"location":"api/constants/#bh_molecule.constants.MolecularConstants.omega_e","title":"<code>omega_e: float = field(metadata={'unit': 'cm^-1', 'desc': 'Harmonic vibrational const (\u03c9_e)'})</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"api/constants/#bh_molecule.constants.MolecularConstants.omega_e_x_e","title":"<code>omega_e_x_e: float = field(metadata={'unit': 'cm^-1', 'desc': 'Anharmonicity (\u03c9_e x_e)'})</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"api/constants/#bh_molecule.constants.MolecularConstants.omega_e_y_e","title":"<code>omega_e_y_e: float = field(metadata={'unit': 'cm^-1', 'desc': 'Higher-order anharmonicity (\u03c9_e y_e)'})</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"api/constants/#bh_molecule.constants.MolecularConstants.we","title":"<code>we: float</code>  <code>property</code>","text":""},{"location":"api/constants/#bh_molecule.constants.MolecularConstants.wexe","title":"<code>wexe: float</code>  <code>property</code>","text":""},{"location":"api/constants/#bh_molecule.constants.MolecularConstants.weye","title":"<code>weye: float</code>  <code>property</code>","text":""},{"location":"api/constants/#bh_molecule.constants.MolecularConstants-functions","title":"Functions","text":""},{"location":"api/constants/#bh_molecule.constants.MolecularConstants.as_dict","title":"<code>as_dict() -&gt; Dict[str, Any]</code>","text":""},{"location":"api/constants/#bh_molecule.constants.MolecularConstants.as_table","title":"<code>as_table() -&gt; str</code>","text":""},{"location":"api/fit/","title":"fit.py","text":""},{"location":"api/fit/#bh_molecule.fit","title":"<code>bh_molecule.fit</code>","text":""},{"location":"api/fit/#bh_molecule.fit-classes","title":"Classes","text":""},{"location":"api/fit/#bh_molecule.fit.BHFitter","title":"<code>BHFitter</code>","text":"<p>Blackbody-Hydrogen molecular spectrum fitter.</p> <p>This class wraps a model object providing <code>full_fit_model</code> and a <code>vis</code> data source exposing <code>spectrum(frame, channel)</code> to perform parameter estimation over a wavelength window and to visualize the resulting fits.</p> <p>Parameters:</p> Name Type Description Default <code>vis</code> <code>object</code> <p>Data source exposing <code>spectrum(frame, channel) -&gt; (wl, spec)</code>.</p> required <code>model</code> <code>object</code> <p>Model providing <code>full_fit_model(x, C, T_rot, dx, w_inst, base, I_R7, I_R8)</code>.</p> required <code>nm_window</code> <code>tuple</code> <p>Wavelength window <code>(lo, hi)</code> in nanometers to select data for fitting. Default is <code>(433.05, 433.90)</code>.</p> <code>(433.05, 433.9)</code> <code>p0</code> <code>tuple or array - like</code> <p>Initial guess for fit parameters. Default is <code>(1.0, 4000.0, 0.01, 0.025, 0.0, 1e-3, 1e-3)</code>.</p> <code>(1.0, 4000.0, 0.01, 0.025, 0.0, 0.001, 0.001)</code> <code>bounds</code> <code>tuple</code> <p>Lower and upper bounds for parameters. Should be <code>(lower, upper)</code> where each is array-like. Defaults to <code>([0, 0, 0, 0, -10, 0, 0], [10, 10000, 1, 0.1, 10, 1, 1])</code>.</p> <code>([0, 0, 0, 0, -10, 0, 0], [10, 10000, 1, 0.1, 10, 1, 1])</code> <code>maxfev</code> <code>int</code> <p>Maximum function evaluations passed to the underlying optimizer.</p> <code>40000</code> <code>weight</code> <code>(none, poisson)</code> <p>Weighting scheme for the fit. If <code>'none'</code> (default) no weighting is used. If <code>'poisson'</code>, sigma is taken as <code>sqrt(y)</code>. If a callable is provided it must have signature <code>weight(x, y) -&gt; sigma</code>.</p> <code>'none'</code> <code>warm_start</code> <code>bool</code> <p>If True reuse the last found parameters as initial guess for the next fit. Defaults to False.</p> <code>False</code> <p>Attributes:</p> Name Type Description <code>param_names</code> <code>list of str</code> <p>Human-readable parameter names used in result tables.</p> <code>param_units</code> <code>list of str</code> <p>Units corresponding to <code>param_names</code>.</p>"},{"location":"api/fit/#bh_molecule.fit.BHFitter-attributes","title":"Attributes","text":""},{"location":"api/fit/#bh_molecule.fit.BHFitter.bounds","title":"<code>bounds = (np.asarray(bounds[0], float), np.asarray(bounds[1], float))</code>  <code>instance-attribute</code>","text":""},{"location":"api/fit/#bh_molecule.fit.BHFitter.maxfev","title":"<code>maxfev = int(maxfev)</code>  <code>instance-attribute</code>","text":""},{"location":"api/fit/#bh_molecule.fit.BHFitter.model","title":"<code>model = model</code>  <code>instance-attribute</code>","text":""},{"location":"api/fit/#bh_molecule.fit.BHFitter.nm_window","title":"<code>nm_window = tuple(map(float, nm_window))</code>  <code>instance-attribute</code>","text":""},{"location":"api/fit/#bh_molecule.fit.BHFitter.p0","title":"<code>p0 = np.asarray(p0, float)</code>  <code>instance-attribute</code>","text":""},{"location":"api/fit/#bh_molecule.fit.BHFitter.param_names","title":"<code>param_names = ['C', 'T_rot', 'dx', 'w_inst', 'base', 'I_R7', 'I_R8']</code>  <code>instance-attribute</code>","text":""},{"location":"api/fit/#bh_molecule.fit.BHFitter.param_units","title":"<code>param_units = ['', 'K', 'nm', 'nm', '', '', '']</code>  <code>instance-attribute</code>","text":""},{"location":"api/fit/#bh_molecule.fit.BHFitter.vis","title":"<code>vis = vis</code>  <code>instance-attribute</code>","text":""},{"location":"api/fit/#bh_molecule.fit.BHFitter.warm_start","title":"<code>warm_start = bool(warm_start)</code>  <code>instance-attribute</code>","text":""},{"location":"api/fit/#bh_molecule.fit.BHFitter.weight","title":"<code>weight = weight</code>  <code>instance-attribute</code>","text":""},{"location":"api/fit/#bh_molecule.fit.BHFitter-functions","title":"Functions","text":""},{"location":"api/fit/#bh_molecule.fit.BHFitter.batch","title":"<code>batch(frames, channels, return_curves=False)</code>","text":"<p>Run fits for multiple frames and channels and collect results.</p> <p>Parameters:</p> Name Type Description Default <code>frames</code> <code>iterable</code> <p>Iterable of frame indices to fit.</p> required <code>channels</code> <code>iterable</code> <p>Iterable of channel indices to fit.</p> required <code>return_curves</code> <code>bool</code> <p>If True, also return a dictionary mapping <code>(frame, channel)</code> to the tuple <code>(x, y, yfit)</code>. Default is False.</p> <code>False</code> <p>Returns:</p> Name Type Description <code>df</code> <code>DataFrame</code> <p>Table of fit results with one row per attempted fit. Columns include parameter values, parameter errors (<code>&lt;name&gt;_err</code>), <code>chi2_red</code>, <code>R2</code>, <code>npts</code> and any error messages for failed fits.</p> <code>curves</code> <code>(dict, optional)</code> <p>Only returned when <code>return_curves</code> is True. Dictionary keyed by <code>(frame, channel)</code> mapping to <code>(x, y, yfit)</code>.</p>"},{"location":"api/fit/#bh_molecule.fit.BHFitter.fit","title":"<code>fit(frame, channel, return_fit=True, p0=None)</code>","text":"<p>Fit the model to a single frame/channel spectrum.</p> <p>Parameters:</p> Name Type Description Default <code>frame</code> <code>int</code> <p>Frame index to fit.</p> required <code>channel</code> <code>int</code> <p>Channel index to fit.</p> required <code>return_fit</code> <code>bool</code> <p>If True, include the fitted model curve (<code>yfit</code>) in the result dictionary. Default is True.</p> <code>True</code> <code>p0</code> <code>array - like</code> <p>Initial guess for the fit parameters. If <code>None</code> uses the fitter's <code>p0</code> or the last fit parameters when <code>warm_start</code> is enabled.</p> <code>None</code> <p>Returns:</p> Name Type Description <code>result</code> <code>dict</code> <p>Dictionary containing fit results and metadata with keys: - <code>frame</code>: frame index - <code>channel</code>: channel index - <code>params</code>: fitted parameter array - <code>cov</code>: covariance matrix from <code>curve_fit</code> - <code>errors</code>: 1-sigma parameter uncertainties - <code>summary</code>: pandas DataFrame with formatted parameter values - <code>x</code>: wavelengths used for the fit - <code>y</code>: observed spectrum used for the fit - <code>yfit</code>: (optional) model-evaluated fit curve when   <code>return_fit</code> is True</p>"},{"location":"api/fit/#bh_molecule.fit.BHFitter.plot_grid","title":"<code>plot_grid(curves, frames=None, channels=None, ncols=3, xlim=None, ylim=None, suptitle=None)</code>","text":"<p>Plot a grid of fit curves.</p> <p>Parameters:</p> Name Type Description Default <code>curves</code> <code>dict</code> <p>Mapping from <code>(frame, channel)</code> to <code>(x, y, yfit)</code> tuples.</p> required <code>frames</code> <code>iterable</code> <p>If provided, only include these frames.</p> <code>None</code> <code>channels</code> <code>iterable</code> <p>If provided, only include these channels.</p> <code>None</code> <code>ncols</code> <code>int</code> <p>Preferred number of columns in the plot grid.</p> <code>3</code> <code>xlim</code> <code>tuple</code> <p>Axis limits forwarded to each subplot.</p> <code>None</code> <code>ylim</code> <code>tuple</code> <p>Axis limits forwarded to each subplot.</p> <code>None</code> <code>suptitle</code> <code>str</code> <p>Optional figure-level title.</p> <code>None</code> <p>Returns:</p> Type Description <code>fig, axes : tuple</code> <p>Matplotlib figure and axes array for the created grid.</p>"},{"location":"api/fit/#bh_molecule.fit.BHFitter.plot_overlay","title":"<code>plot_overlay(curves, frame, channels=None, xlim=None, ylim=None, title=None, *, cmap: str = 'tab10', line_width: float = 1.0, line_alpha: float = 0.95, scatter_size: float = 8.0, scatter_alpha: float = 0.35, legend_cols: int | None = None)</code>","text":"<p>Overlay multiple channels for a single frame.</p> <p>Parameters:</p> Name Type Description Default <code>curves</code> <code>dict</code> <p>Mapping from <code>(frame, channel)</code> to <code>(x, y, yfit)</code> tuples.</p> required <code>frame</code> <code>int</code> <p>Frame index to draw.</p> required <code>channels</code> <code>iterable</code> <p>If provided, only include these channels.</p> <code>None</code> <code>xlim</code> <code>tuple</code> <p>Axis limits.</p> <code>None</code> <code>ylim</code> <code>tuple</code> <p>Axis limits.</p> <code>None</code> <code>title</code> <code>str</code> <p>Axis title.</p> <code>None</code> <code>cmap</code> <code>str</code> <p>Matplotlib colormap name used to assign channel colors.</p> <code>'tab10'</code> <code>line_width</code> <code>float</code> <p>Width of the model lines.</p> <code>1.0</code> <code>line_alpha</code> <code>float</code> <p>Transparency for model lines.</p> <code>0.95</code> <code>scatter_size</code> <code>float</code> <p>Size for scatter points.</p> <code>8.0</code> <code>scatter_alpha</code> <code>float</code> <p>Alpha for scatter points.</p> <code>0.35</code> <code>legend_cols</code> <code>int or None</code> <p>Number of columns for the legend. If <code>None</code> a sensible default is chosen.</p> <code>None</code> <p>Returns:</p> Type Description <code>fig, ax : tuple</code> <p>Matplotlib figure and axis containing the overlay plot.</p>"},{"location":"api/fit/#bh_molecule.fit.BHFitter.plot_single","title":"<code>plot_single(res, xlim=None, ylim=None, title=None, ax=None)</code>","text":"<p>Plot a single fit result (data and optional model curve).</p> <p>Parameters:</p> Name Type Description Default <code>res</code> <code>dict</code> <p>Result dictionary as returned by <code>fit</code> (must contain <code>x</code> and <code>y</code>; may contain <code>yfit</code>).</p> required <code>xlim</code> <code>tuple</code> <p>X-axis limits as <code>(xmin, xmax)</code>. Defaults to the fitter's <code>nm_window</code>.</p> <code>None</code> <code>ylim</code> <code>tuple</code> <p>Y-axis limits as <code>(ymin, ymax)</code>.</p> <code>None</code> <code>title</code> <code>str</code> <p>Plot title.</p> <code>None</code> <code>ax</code> <code>Axes</code> <p>Axis to draw into. If <code>None</code> a new figure and axis are created.</p> <code>None</code> <p>Returns:</p> Name Type Description <code>ax</code> <code>Axes</code> <p>The axis containing the plot.</p>"},{"location":"api/physics/","title":"physics.py API","text":""},{"location":"api/physics/#bh_molecule.physics","title":"<code>bh_molecule.physics</code>","text":""},{"location":"api/physics/#bh_molecule.physics-attributes","title":"Attributes","text":""},{"location":"api/physics/#bh_molecule.physics-classes","title":"Classes","text":""},{"location":"api/physics/#bh_molecule.physics.BHModel","title":"<code>BHModel</code>","text":"<p>BH spectroscopy model. See Also Physics explainer</p>"},{"location":"api/physics/#bh_molecule.physics.BHModel-attributes","title":"Attributes","text":""},{"location":"api/physics/#bh_molecule.physics.BHModel.K2eV","title":"<code>K2eV = spc.Boltzmann / spc.eV</code>  <code>instance-attribute</code>","text":""},{"location":"api/physics/#bh_molecule.physics.BHModel.K2wn","title":"<code>K2wn = spc.Boltzmann / (spc.h * spc.c * 100)</code>  <code>instance-attribute</code>","text":""},{"location":"api/physics/#bh_molecule.physics.BHModel.M_BH","title":"<code>M_BH = 11.81</code>  <code>instance-attribute</code>","text":""},{"location":"api/physics/#bh_molecule.physics.BHModel.g_as","title":"<code>g_as = 8</code>  <code>instance-attribute</code>","text":""},{"location":"api/physics/#bh_molecule.physics.BHModel.v00_wl","title":"<code>v00_wl = v00_wl_df</code>  <code>instance-attribute</code>","text":""},{"location":"api/physics/#bh_molecule.physics.BHModel.wn2Hz","title":"<code>wn2Hz = spc.c * 100.0</code>  <code>instance-attribute</code>","text":""},{"location":"api/physics/#bh_molecule.physics.BHModel-functions","title":"Functions","text":""},{"location":"api/physics/#bh_molecule.physics.BHModel.A_coeff","title":"<code>A_coeff(v: int, N2: int, N1: int) -&gt; float</code>  <code>staticmethod</code>","text":"<p>Einstein :math:<code>A_{ul}</code> for :math:<code>A\\,^1\\Pi \\rightarrow X\\,^1\\Sigma^+</code> line.</p> <p>Parameters:</p> Name Type Description Default <code>v</code> <code>int</code> <p>Upper vibrational level :math:<code>v'</code>.</p> required <code>N2</code> <code>int</code> <p>Upper rotational level :math:<code>N_2</code> (A-state).</p> required <code>N1</code> <code>int</code> <p>Lower rotational level :math:<code>N_1</code> (X-state).</p> required <p>Returns:</p> Type Description <code>float</code> <p>:math:<code>A_{ul}</code> in s\u207b\u00b9.</p> <code>See Also [Physics explainer \u2014 A coefficient](../phys.md#a-coeff)</code>"},{"location":"api/physics/#bh_molecule.physics.BHModel.energy","title":"<code>energy(v: int, N: int, c: MolecularConstants) -&gt; float</code>  <code>staticmethod</code>","text":"<p>Level term value :math:<code>E(v,N)</code> [cm\u207b\u00b9].</p> <p>Parameters:</p> Name Type Description Default <code>v</code> <code>int</code> <p>Vibrational quantum number (:math:<code>v'</code>).</p> required <code>N</code> <code>int</code> <p>Rotational quantum number (:math:<code>N</code>); for singlets, :math:<code>J=N</code>.</p> required <code>c</code> <code>MolecularConstants</code> <p>State constants (:math:<code>T_e, \\omega_e, \\omega_e x_e, \\omega_e y_e, B_e, \\alpha_e, D_e, \\beta_e</code>).</p> required <p>Returns:</p> Type Description <code>float</code> <p>Term value :math:<code>E(v,N)</code> in cm\u207b\u00b9.</p> <code>See Also [Physics explainer \u2014 energy](../phys.md#energy)</code>"},{"location":"api/physics/#bh_molecule.physics.BHModel.full_fit_model","title":"<code>full_fit_model(x: np.ndarray, C: float, T_rot: float, dx: float, w_inst: float, base: float, I_R7: float, I_R8: float) -&gt; np.ndarray</code>","text":"<p>Composite forward model near 433 nm: BH Q-branch + two fixed Gaussians + baseline.</p> <p>Parameters:</p> Name Type Description Default <code>x</code> <code>ndarray</code> <p>Wavelength grid [nm].</p> required <code>C</code> <code>float</code> <p>Overall population/intensity scale for the BH Q-branch.</p> required <code>T_rot</code> <code>float</code> <p>Rotational temperature [K].</p> required <code>dx</code> <code>float</code> <p>Grid shift [nm].</p> required <code>w_inst</code> <code>float</code> <p>Instrumental Gaussian FWHM [nm].</p> required <code>base</code> <code>float</code> <p>Constant baseline.</p> required <code>I_R7</code> <code>float</code> <p>Amplitude of auxiliary line at :math:<code>\\lambda_{R7}</code>.</p> required <code>I_R8</code> <code>float</code> <p>Amplitude of auxiliary line at :math:<code>\\lambda_{R8}</code>.</p> required <p>Returns:</p> Type Description <code>ndarray</code> <p>Model evaluated on <code>x</code>.</p> <code>See Also [Physics explainer \u2014 full fit model](../phys.md#full-fit-model)</code>"},{"location":"api/physics/#bh_molecule.physics.BHModel.line_profile","title":"<code>line_profile(x, wl, w_inst, T)</code>","text":"<p>Gaussian line profile in wavelength with Doppler \u2295 instrumental FWHM.</p> <p>Parameters:</p> Name Type Description Default <code>x</code> <code>array_like</code> <p>Wavelength grid [nm].</p> required <code>wl</code> <code>float</code> <p>Line center wavelength [nm].</p> required <code>w_inst</code> <code>float</code> <p>Instrumental FWHM [nm] (Gaussian).</p> required <code>T</code> <code>float</code> <p>Translational/kinetic temperature [K] for Doppler broadening.</p> required <p>Returns:</p> Type Description <code>ndarray</code> <p>Normalized profile sampled on <code>x</code> (area \u2248 1).</p> <code>See Also [Physics explainer \u2014 line profile](../phys.md#line-profile)</code>"},{"location":"api/physics/#bh_molecule.physics.BHModel.spectrum","title":"<code>spectrum(x: np.ndarray, C: float, T_rot: float, w_inst: float, T_tra: float, branch: Branch, v_max: int = 2, N2_max: int = 22) -&gt; np.ndarray</code>","text":"<p>Branch spectrum on a wavelength grid; sums Gaussian lines over P/Q/R.</p> <p>Parameters:</p> Name Type Description Default <code>x</code> <code>ndarray</code> <p>Wavelength grid [nm].</p> required <code>C</code> <code>float</code> <p>Population scale factor.</p> required <code>T_rot</code> <code>float</code> <p>Rotational temperature [K].</p> required <code>w_inst</code> <code>float</code> <p>Instrumental Gaussian FWHM [nm].</p> required <code>T_tra</code> <code>float</code> <p>Translational temperature [K] for Doppler.</p> required <code>branch</code> <code>Branch</code> <p>Rotational branch to synthesize.</p> required <code>v_max</code> <code>int</code> <p>Highest upper vibrational level :math:<code>v'</code> (inclusive).</p> <code>2</code> <code>N2_max</code> <code>int</code> <p>Highest upper rotational level :math:<code>N_2</code> (inclusive).</p> <code>22</code> <p>Returns:</p> Type Description <code>ndarray</code> <p>Spectrum on <code>x</code> (same shape), arbitrary units.</p> <code>See Also [Physics explainer \u2014 spectrum](../phys.md#spectrum)</code>"},{"location":"api/physics/#bh_molecule.physics.Branch","title":"<code>Branch</code>","text":"<p>               Bases: <code>Enum</code></p>"},{"location":"api/physics/#bh_molecule.physics.Branch-attributes","title":"Attributes","text":""},{"location":"api/physics/#bh_molecule.physics.Branch.P","title":"<code>P = 'P'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"api/physics/#bh_molecule.physics.Branch.Q","title":"<code>Q = 'Q'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"api/physics/#bh_molecule.physics.Branch.R","title":"<code>R = 'R'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"api/vis133m/","title":"vis133m.py API","text":"<p>A short API reference for the <code>Vis133M</code> loader/processor.</p>"},{"location":"api/vis133m/#bh_molecule.instruments.vis133m","title":"<code>bh_molecule.instruments.vis133m</code>","text":""},{"location":"api/vis133m/#bh_molecule.instruments.vis133m-classes","title":"Classes","text":""},{"location":"api/vis133m/#bh_molecule.instruments.vis133m.FCPShape","title":"<code>FCPShape</code>","text":"<p>               Bases: <code>NamedTuple</code></p>"},{"location":"api/vis133m/#bh_molecule.instruments.vis133m.FCPShape-attributes","title":"Attributes","text":""},{"location":"api/vis133m/#bh_molecule.instruments.vis133m.FCPShape.C","title":"<code>C: int</code>  <code>instance-attribute</code>","text":""},{"location":"api/vis133m/#bh_molecule.instruments.vis133m.FCPShape.F","title":"<code>F: int</code>  <code>instance-attribute</code>","text":""},{"location":"api/vis133m/#bh_molecule.instruments.vis133m.FCPShape.P","title":"<code>P: int</code>  <code>instance-attribute</code>","text":""},{"location":"api/vis133m/#bh_molecule.instruments.vis133m.Vis133M","title":"<code>Vis133M</code>","text":"<p>Minimal loader/processor for VIS-1.33 m data with per-channel wavecal.</p> <p>This class wraps a FITS data cube produced by the VIS-1.33 m instrument and a per-channel wavelength calibration CSV. It provides convenient accessors and plotting helpers for frames, channels and pixels, plus simple dark subtraction and time-axis helpers.</p> <p>Parameters:</p> Name Type Description Default <code>fits_path</code> <code>str</code> <p>Path to a FITS file containing a 3D data cube with shape <code>(F, C, P)</code> (frames, channels, pixels).</p> required <code>wavecal_csv</code> <code>str</code> <p>Path to a CSV file containing per-channel wavelength calibration. The first column must contain channel indices (0-based preferred, 1-based accepted). Remaining columns are interpreted as wavelength values [nm] for each pixel.</p> required <code>scale</code> <code>float</code> <p>Multiplicative scale factor applied to the cube data (default 1.0).</p> <code>1.0</code> <p>Attributes:</p> Name Type Description <code>cube</code> <code>ndarray</code> <p>The data cube of shape <code>(F, C, P)</code>.</p> <code>wl_nm</code> <code>ndarray</code> <p>Per-channel wavelength array with shape <code>(C, P)</code> in nanometres.</p> <code>header</code> <code>dict</code> <p>FITS header converted to a dict.</p> <code>exptime</code> <code>float | None</code> <p>Exposure time read from the FITS header when available.</p> <code>time_s</code> <code>ndarray | None</code> <p>Optional time vector in seconds of length <code>F</code>. If unset, frame indices are used for plotting/time axes.</p>"},{"location":"api/vis133m/#bh_molecule.instruments.vis133m.Vis133M-attributes","title":"Attributes","text":""},{"location":"api/vis133m/#bh_molecule.instruments.vis133m.Vis133M.axis_legend","title":"<code>axis_legend: dict[str, str]</code>  <code>property</code>","text":"<p>Mapping of axis short names to human-readable descriptions.</p> <p>Returns:</p> Type Description <code>dict</code> <p>Mapping with keys <code>'F'</code>, <code>'C'</code>, <code>'P'</code> describing the axes.</p>"},{"location":"api/vis133m/#bh_molecule.instruments.vis133m.Vis133M.cube","title":"<code>cube = cube</code>  <code>instance-attribute</code>","text":""},{"location":"api/vis133m/#bh_molecule.instruments.vis133m.Vis133M.exptime","title":"<code>exptime = self.header.get('EXPTIME') or self.header.get('EXPOSURE')</code>  <code>instance-attribute</code>","text":""},{"location":"api/vis133m/#bh_molecule.instruments.vis133m.Vis133M.filename","title":"<code>filename = fits_path</code>  <code>instance-attribute</code>","text":""},{"location":"api/vis133m/#bh_molecule.instruments.vis133m.Vis133M.header","title":"<code>header = dict(hdu.header)</code>  <code>instance-attribute</code>","text":""},{"location":"api/vis133m/#bh_molecule.instruments.vis133m.Vis133M.scale","title":"<code>scale = float(scale)</code>  <code>instance-attribute</code>","text":""},{"location":"api/vis133m/#bh_molecule.instruments.vis133m.Vis133M.shape","title":"<code>shape</code>  <code>property</code>","text":"<p>Return the shape of the internal data cube.</p> <p>Returns:</p> Type Description <code>tuple</code> <p>Shape <code>(F, C, P)</code> where <code>F</code> is frames, <code>C</code> is channels and <code>P</code> is pixels (wavelength samples).</p>"},{"location":"api/vis133m/#bh_molecule.instruments.vis133m.Vis133M.shape_fcp","title":"<code>shape_fcp: FCPShape</code>  <code>property</code>","text":"<p>Named shape with axis meanings.</p> <p>Returns:</p> Type Description <code>FCPShape</code> <p>Named tuple containing <code>F</code>, <code>C</code> and <code>P</code> describing the number of frames, channels and pixels respectively.</p>"},{"location":"api/vis133m/#bh_molecule.instruments.vis133m.Vis133M.time_s","title":"<code>time_s = None</code>  <code>instance-attribute</code>","text":""},{"location":"api/vis133m/#bh_molecule.instruments.vis133m.Vis133M.wl_nm","title":"<code>wl_nm = wl</code>  <code>instance-attribute</code>","text":""},{"location":"api/vis133m/#bh_molecule.instruments.vis133m.Vis133M-functions","title":"Functions","text":""},{"location":"api/vis133m/#bh_molecule.instruments.vis133m.Vis133M.band","title":"<code>band(nm_range: tuple[float, float], subtract_dark: bool = True) -&gt; np.ndarray</code>","text":"<p>Sum signal within a wavelength band (per-channel) returning an image of shape <code>(F, C)</code>.</p> <p>Parameters:</p> Name Type Description Default <code>nm_range</code> <code>tuple of float</code> <p><code>(lo, hi)</code> wavelength range in nanometres (inclusive).</p> required <code>subtract_dark</code> <code>bool</code> <p>If True and a dark is configured via <code>set_dark</code>, subtract the dark from the resulting image (default True).</p> <code>True</code> <p>Returns:</p> Type Description <code>ndarray</code> <p>Summed image of shape <code>(F, C)</code> in the same units as the cube multiplied by the current <code>scale</code>.</p>"},{"location":"api/vis133m/#bh_molecule.instruments.vis133m.Vis133M.channel_stack","title":"<code>channel_stack(channel: int, *, zero_min: bool | None = None) -&gt; np.ndarray</code>","text":"<p>Return the time\u00d7pixel stack for a single channel.</p> <p>Parameters:</p> Name Type Description Default <code>channel</code> <code>int</code> <p>Channel index (0-based).</p> required <p>Returns:</p> Type Description <code>ndarray</code> <p>Array of shape <code>(F, P)</code> containing the stack for the channel.</p>"},{"location":"api/vis133m/#bh_molecule.instruments.vis133m.Vis133M.explain","title":"<code>explain() -&gt; None</code>","text":"<p>Print a short human-readable description of the data axes.</p> <p>This helper is convenient in interactive sessions or notebooks.</p>"},{"location":"api/vis133m/#bh_molecule.instruments.vis133m.Vis133M.frame_image","title":"<code>frame_image(frame: int, *, zero_min: bool | None = None) -&gt; np.ndarray</code>","text":"<p>Return the channel\u00d7pixel image for a single frame.</p> <p>Parameters:</p> Name Type Description Default <code>frame</code> <code>int</code> <p>Frame index (0-based).</p> required <p>Returns:</p> Type Description <code>ndarray</code> <p>Array of shape <code>(C, P)</code> corresponding to the requested frame.</p>"},{"location":"api/vis133m/#bh_molecule.instruments.vis133m.Vis133M.map_band","title":"<code>map_band(nm_range: tuple[float, float], *, subtract_dark: bool = True) -&gt; np.ndarray</code>","text":"<p>Sum signal within a wavelength band (per-channel) returning (F, C).</p> <p>Parameters:</p> Name Type Description Default <code>nm_range</code> <code>tuple of float</code> <p><code>(lo, hi)</code> wavelength range in nanometres (inclusive).</p> required <code>subtract_dark</code> <code>bool</code> <p>If True subtract a configured dark (default True).</p> <code>True</code> <p>Returns:</p> Type Description <code>ndarray</code> <p>Summed image of shape <code>(F, C)</code>.</p>"},{"location":"api/vis133m/#bh_molecule.instruments.vis133m.Vis133M.map_pixel_range","title":"<code>map_pixel_range(start: int, stop: int, *, subtract_dark: bool = True) -&gt; np.ndarray</code>","text":"<p>Sum over a pixel window returning an (F, C) image.</p> <p>Parameters:</p> Name Type Description Default <code>start</code> <code>int</code> <p>Start pixel index (inclusive).</p> required <code>stop</code> <code>int</code> <p>Stop pixel index (exclusive).</p> required <code>subtract_dark</code> <code>bool</code> <p>If True subtract a configured dark (default True).</p> <code>True</code> <p>Returns:</p> Type Description <code>ndarray</code> <p>Summed image of shape <code>(F, C)</code>.</p>"},{"location":"api/vis133m/#bh_molecule.instruments.vis133m.Vis133M.pixel_map","title":"<code>pixel_map(pixel: int) -&gt; np.ndarray</code>","text":"<p>Return the frame\u00d7channel map at a fixed detector pixel.</p> <p>Parameters:</p> Name Type Description Default <code>pixel</code> <code>int</code> <p>Pixel index (0-based).</p> required <p>Returns:</p> Type Description <code>ndarray</code> <p>Array of shape <code>(F, C)</code> containing values at the given pixel.</p>"},{"location":"api/vis133m/#bh_molecule.instruments.vis133m.Vis133M.plot_band_map","title":"<code>plot_band_map(nm_range: tuple[float, float], *, ax=None, cmap=None, cbar_label='intensity', channel_line: int | None = None, require_time: bool = False, subtract_dark: bool = True)</code>","text":"<p>Plot the result of <code>map_band(nm_range)</code>.</p> <p>Parameters:</p> Name Type Description Default <code>nm_range</code> <code>tuple of float</code> <p><code>(lo, hi)</code> wavelength range in nanometres.</p> required <p>Returns:</p> Type Description <code>Axes</code> <p>The axes containing the image.</p> <code>See Also map_band, _plot_fc</code>"},{"location":"api/vis133m/#bh_molecule.instruments.vis133m.Vis133M.plot_channel_stack","title":"<code>plot_channel_stack(channel: int, *, ax=None, cmap=None, cbar_label='intensity', time_line: float | None = None, require_time: bool = False)</code>","text":"<p>Plot a channel stack (time \u00d7 wavelength) as an image.</p> <p>Parameters:</p> Name Type Description Default <code>channel</code> <code>int</code> <p>Channel index (0-based) to plot.</p> required <code>ax</code> <code>Axes | None</code> <p>Axes to plot into. If None the current axes are used.</p> <code>None</code> <code>cmap</code> <code>str | Colormap | None</code> <p>Colormap to use for the image.</p> <code>None</code> <code>cbar_label</code> <code>str</code> <p>Label for the colorbar (default \"intensity\").</p> <code>'intensity'</code> <code>time_line</code> <code>float | None</code> <p>Optional vertical line (x coordinate in time units) to indicate a time-of-interest.</p> <code>None</code> <code>require_time</code> <code>bool</code> <p>If True require an explicit time vector (raise if unset).</p> <code>False</code> <p>Returns:</p> Type Description <code>Axes</code> <p>The axes containing the image.</p>"},{"location":"api/vis133m/#bh_molecule.instruments.vis133m.Vis133M.plot_pixel_map","title":"<code>plot_pixel_map(pixel: int, *, ax=None, cmap=None, cbar_label='intensity', channel_line: int | None = None, require_time: bool = False)</code>","text":"<p>Plot a frame\u00d7channel image for a fixed pixel index.</p> <p>Parameters:</p> Name Type Description Default <code>pixel</code> <code>int</code> <p>Pixel index (0-based).</p> required <code>ax</code> <code>Axes | None</code> <p>Axes to plot into. If None the current axes are used.</p> <code>None</code> <code>cmap</code> <code>str | Colormap | None</code> <p>Colormap to use for the image.</p> <code>None</code> <code>cbar_label</code> <code>str</code> <p>Label for the colorbar (default \"intensity\").</p> <code>'intensity'</code> <code>channel_line</code> <code>int | None</code> <p>Optional horizontal line indicating a channel of interest.</p> <code>None</code> <code>require_time</code> <code>bool</code> <p>If True require an explicit time vector (raise if unset).</p> <code>False</code> <p>Returns:</p> Type Description <code>Axes</code> <p>The axes containing the image.</p>"},{"location":"api/vis133m/#bh_molecule.instruments.vis133m.Vis133M.plot_pixel_range","title":"<code>plot_pixel_range(start: int, stop: int, *, ax=None, cmap=None, cbar_label='intensity', channel_line: int | None = None, require_time: bool = False, subtract_dark: bool = True)</code>","text":"<p>Plot the result of <code>map_pixel_range(start, stop)</code>.</p> <p>Parameters:</p> Name Type Description Default <code>start</code> <code>int</code> <p>Start pixel index (inclusive).</p> required <code>stop</code> <code>int</code> <p>Stop pixel index (exclusive).</p> required <p>Returns:</p> Type Description <code>Axes</code> <p>The axes containing the image.</p>"},{"location":"api/vis133m/#bh_molecule.instruments.vis133m.Vis133M.plot_spectrum","title":"<code>plot_spectrum(frame: int, channel: int, ax=None, *, zero_min: bool | None = None)</code>","text":"<p>Plot the spectrum at a given frame and channel using Matplotlib.</p> <p>Parameters:</p> Name Type Description Default <code>frame</code> <code>int</code> <p>Frame index (0-based).</p> required <code>channel</code> <code>int</code> <p>Channel index (0-based).</p> required <code>ax</code> <code>Axes | None</code> <p>Axes to plot into. If None the current axes are used.</p> <code>None</code> <p>Returns:</p> Type Description <code>Axes</code> <p>The axes containing the plot.</p>"},{"location":"api/vis133m/#bh_molecule.instruments.vis133m.Vis133M.plot_spectrum_plotly","title":"<code>plot_spectrum_plotly(frame: int, channel: int, *, sort_wavelength: bool = True, line_shape: str = 'linear', zero_min: bool | None = None)</code>","text":"<p>Return an interactive Plotly figure for a spectrum.</p> <p>Parameters:</p> Name Type Description Default <code>frame</code> <code>int</code> <p>Frame index (0-based).</p> required <code>channel</code> <code>int</code> <p>Channel index (0-based).</p> required <code>sort_wavelength</code> <code>bool</code> <p>If True, sort the wavelength vector to be monotonic for better interactive behaviour (default True).</p> <code>True</code> <code>line_shape</code> <code>str</code> <p>Plotly line shape (e.g. 'linear', 'spline').</p> <code>'linear'</code> <p>Returns:</p> Type Description <code>Figure</code> <p>Interactive figure containing the spectrum.</p> <p>Raises:</p> Type Description <code>ImportError</code> <p>If Plotly is not available.</p> Example <p>fig = s26.plot_spectrum_plotly(38, 36) fig.show()</p>"},{"location":"api/vis133m/#bh_molecule.instruments.vis133m.Vis133M.set_baseline_zero","title":"<code>set_baseline_zero(enable: bool = True) -&gt; None</code>","text":"<p>Enable/disable per-spectrum minimum subtraction.</p> <p>When enabled, each spectrum row (across pixels) will be shifted so its minimum is zero in methods that return spectra-like arrays.</p> <p>Parameters:</p> Name Type Description Default <code>enable</code> <code>bool</code> <p>If True, subtract per-row minima from spectra results. If False, disable this behaviour.</p> <code>True</code>"},{"location":"api/vis133m/#bh_molecule.instruments.vis133m.Vis133M.set_dark","title":"<code>set_dark(*, frame: int | None = None, channel: int | None = None, vector=None, value: float | None = None)</code>","text":"<p>Configure dark subtraction behaviour.</p> <p>Dark can be specified in several ways: - <code>vector</code>: an array-like that will be used directly as the dark   correction (broadcasting rules apply). - <code>value</code>: a scalar dark value subtracted from all pixels. - <code>frame</code> and <code>channel</code>: record a reference index; subtraction will   subtract the value found at that (frame, channel) location when   applied.</p> <p>Parameters:</p> Name Type Description Default <code>frame</code> <code>int | None</code> <p>Frame index used for index-based dark (with <code>channel</code>).</p> <code>None</code> <code>channel</code> <code>int | None</code> <p>Channel index used for index-based dark (with <code>frame</code>).</p> <code>None</code> <code>vector</code> <code>array - like | None</code> <p>Direct dark vector/array to use for subtraction.</p> <code>None</code> <code>value</code> <code>float | None</code> <p>Scalar dark value to subtract.</p> <code>None</code>"},{"location":"api/vis133m/#bh_molecule.instruments.vis133m.Vis133M.set_scale","title":"<code>set_scale(scale: float)</code>","text":"<p>Set the global multiplicative scale applied to the cube.</p> <p>Parameters:</p> Name Type Description Default <code>scale</code> <code>float</code> <p>New scale factor.</p> required"},{"location":"api/vis133m/#bh_molecule.instruments.vis133m.Vis133M.set_time","title":"<code>set_time(t)</code>","text":"<p>Set an explicit time vector for the frames.</p> <p>Parameters:</p> Name Type Description Default <code>t</code> <code>array - like</code> <p>Time vector (seconds) of length <code>F</code> where <code>F</code> is the number of frames in the cube. Must be non-decreasing and contain finite values.</p> required <p>Raises:</p> Type Description <code>ValueError</code> <p>If the vector length does not match <code>F</code>, contains non-finite values, or is not non-decreasing.</p>"},{"location":"api/vis133m/#bh_molecule.instruments.vis133m.Vis133M.set_time_linspace","title":"<code>set_time_linspace(start_s: float, stop_s: float)</code>","text":"<p>Set <code>time_s</code> to a linearly spaced vector between two times.</p> <p>Parameters:</p> Name Type Description Default <code>start_s</code> <code>float</code> <p>Start time in seconds.</p> required <code>stop_s</code> <code>float</code> <p>Stop time in seconds.</p> required"},{"location":"api/vis133m/#bh_molecule.instruments.vis133m.Vis133M.set_time_period","title":"<code>set_time_period(period_s: float, start_s: float = 0.0)</code>","text":"<p>Set <code>time_s</code> assuming a constant frame period.</p> <p>Parameters:</p> Name Type Description Default <code>period_s</code> <code>float</code> <p>Time between successive frames in seconds.</p> required <code>start_s</code> <code>float</code> <p>Time of the first frame (default 0.0 s).</p> <code>0.0</code>"},{"location":"api/vis133m/#bh_molecule.instruments.vis133m.Vis133M.spectrum","title":"<code>spectrum(frame: int, channel: int, *, zero_min: bool | None = None) -&gt; tuple[np.ndarray, np.ndarray]</code>","text":"<p>Return wavelength and signal arrays for a given <code>(frame, channel)</code>.</p> <p>Parameters:</p> Name Type Description Default <code>frame</code> <code>int</code> <p>Frame index (0-based).</p> required <code>channel</code> <code>int</code> <p>Channel index (0-based).</p> required <p>Returns:</p> Type Description <code>tuple of ndarray</code> <p><code>(wavelengths, signal)</code> where both arrays have shape <code>(P,)</code> and wavelengths are in nanometres. <code>signal</code> is scaled by the current <code>scale</code> attribute.</p> <p>Raises:</p> Type Description <code>IndexError</code> <p>If <code>frame</code> or <code>channel</code> are out of range.</p>"},{"location":"examples/02_quickstart/","title":"Quickstart","text":""},{"location":"examples/02_quickstart/#02_quickstart-from-examples02_quickstartipynb","title":"02_quickstart (from examples/02_quickstart.ipynb)","text":"<pre><code>import numpy as np\nimport matplotlib.pyplot as plt\nfrom bh_molecule.dataio import load_v00_wavelengths\nfrom bh_molecule.physics import BHModel\n</code></pre> <pre><code>model = BHModel()\nx = np.linspace(432.8, 434.2, 4000)  # nm\ny = model.full_fit_model(x, C=5.0, T_rot=3500, dx=0.0, w_inst=0.02, base=0.0, I_R7=0.04, I_R8=0.03)\n\nplt.plot(x, y)\nplt.xlabel(\"Wavelength (nm)\")\nplt.ylabel(\"Intensity (a.u.)\")\n</code></pre>"},{"location":"examples/03_load_spectral_data/","title":"Load spectral data","text":""},{"location":"examples/03_load_spectral_data/#03_load_spectral_data-from-examples03_load_spectral_dataipynb","title":"03_load_spectral_data (from examples/03_load_spectral_data.ipynb)","text":"<pre><code>from bh_molecule.instruments.vis133m import Vis133M\n</code></pre> <pre><code>FITS = './133mVis_169626.fits'\nwavecal_csv = './133mVis_wavcal.csv'\ns26 = Vis133M(FITS,wavecal_csv)\ns26.set_scale(0.0001837)\ns26.set_dark(frame=49, channel=43)\ns26.set_baseline_zero(True)\ns26.set_time_linspace(0, 10)\n</code></pre> <pre><code>s26.plot_pixel_range(456,642)\n</code></pre> <pre><code>s26.plot_band_map((433.9, 435))\n</code></pre> <pre><code>fig = s26.plot_spectrum_plotly(31, 30)\nfig.show()\n</code></pre>"},{"location":"examples/04_bh_fit/","title":"BH fit example","text":""},{"location":"examples/04_bh_fit/#04_bh_fit-from-examples04_bh_fitipynb","title":"04_bh_fit (from examples/04_bh_fit.ipynb)","text":"<pre><code>import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\nfrom bh_molecule.instruments.vis133m import Vis133M\nfrom bh_molecule.dataio import load_v00_wavelengths\nfrom bh_molecule.physics import BHModel\n</code></pre> <pre><code>from bh_molecule.fit import BHFitter\n</code></pre> <pre><code>FITS = './133mVis_169626.fits'\nwavecal_csv = './133mVis_wavcal.csv'\ns26 = Vis133M(FITS,wavecal_csv)\ns26.set_scale(0.0001837)\ns26.set_dark(frame=49, channel=43)\ns26.set_baseline_zero(True)\ns26.set_time_linspace(0, 10)\n#s26.plot_band_map((432.5,433.85))\n</code></pre> <pre><code>model = BHModel()\n</code></pre> <pre><code>fitr = BHFitter(s26, model, warm_start=True, weight=\"none\")\nres = fitr.fit(frame=38, channel=31)\ndisplay(res[\"summary\"])\n_ = fitr.plot_single(res, title=\"Example\")\n</code></pre> <pre><code>list(range(24,31))\n</code></pre> <pre><code>resb,curves = fitr.batch((25,26,31), range(28,31),return_curves=True)\n</code></pre> <pre><code>_ = fitr.plot_grid(curves)\n</code></pre> <pre><code>fitr.plot_overlay(curves,frame=31,channels=range(28,31),line_width=1.5)\n</code></pre>"}]}