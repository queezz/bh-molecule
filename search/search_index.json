{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"BH Spectra","text":"<p>This project provides tools to model and fit the A\u2013X band spectra of boron hydride (BH). It began life as a set of Jupyter notebooks and has since been refactored into a Python package.</p>"},{"location":"#quick-start","title":"Quick start","text":"<p>Install the package in editable mode:</p> <pre><code>pip install -e .\n</code></pre> <p>Then run the command line tool:</p> <pre><code>bh-spectra --xmin 432.8 --xmax 434.2 --points 4000 --out spectrum.npz\n</code></pre> <p>Or use the Python API:</p> <pre><code>import numpy as np\nfrom bh_spectra.dataio import load_v00_wavelengths\nfrom bh_spectra.physics import BHModel\n\nv00 = load_v00_wavelengths()\nmodel = BHModel(v00)\nx = np.linspace(432.8, 434.2, 4000)\ny = model.full_fit_model(x, C=1.0, T_rot=2000, dx=0.0, w_inst=0.02,\n                         base=0.0, I_R7=0.5, I_R8=0.3)\n</code></pre>"},{"location":"#documentation","title":"Documentation","text":"<p>These files are prepared for use with MkDocs. To build the site locally:</p> <pre><code>pip install mkdocs\nmkdocs build\n</code></pre> <p>The resulting HTML can be published with GitHub Pages.</p>"},{"location":"physics/","title":"Physics API","text":"<p>Documentation extracted from docstrings in <code>bh_spectra.physics</code>.</p> <p>(Auto-generated by <code>docs/generate_physics_docs.py</code>.)</p>"},{"location":"physics/#bhmodel","title":"BHModel","text":"<p>Core BH spectrum model; file I/O is done elsewhere (dataio).</p>"},{"location":"physics/#energy","title":"<code>energy</code>","text":"<p>Rovibronic term value \\(E(v,N)\\) (in cm\u207b\u00b9) for a given electronic state.</p> <p>The model uses a Dunham-like expansion truncated to cubic vibrational terms and quartic (centrifugal distortion) in rotation:</p> \\[ E(v,N) \\;=\\; T_e \\;+\\; G(v) \\;+\\; F_v(N), \\] <p>with</p> \\[ \\begin{aligned} G(v) &amp;= \\omega_e\\,(v+\\tfrac12) - \\omega_e x_e\\,(v+\\tfrac12)^2 + \\omega_e y_e\\,(v+\\tfrac12)^3, \\\\ B_v  &amp;= B_e - \\alpha_e\\,(v+\\tfrac12), \\\\ D_v  &amp;= D_e - \\beta_e\\,(v+\\tfrac12), \\\\ F_v(N) &amp;= B_v\\,N(N+1) - D_v\\,\\big[N(N+1)\\big]^2 . \\end{aligned} \\]"},{"location":"physics/#parameters","title":"Parameters","text":"<p><code>v</code> : int     Vibrational quantum number \\(v \\ge 0\\).</p> <p><code>N</code> : int     Rotational quantum number (spinless). For singlet states,     \\(J \\approx N\\); fine/\u039b-doubling and spin-rotation are neglected here.</p> <p><code>c</code> : MolecularConstants     Parameter set for the electronic state (fields in cm\u207b\u00b9):     <code>T_e, omega_e, omega_e_x_e, omega_e_y_e, B_e, alpha_e, D_e, beta_e</code>.</p>"},{"location":"physics/#returns","title":"Returns","text":"<p>float     Rovibronic term value \\(E(v,N)\\) in cm\u207b\u00b9.</p>"},{"location":"physics/#notes","title":"Notes","text":"<ul> <li>Truncation: includes up to \\((v+\\tfrac12)^3\\) in \\(G(v)\\) and   \\([N(N+1)]^2\\) in \\(F_v(N)\\). Higher-order terms (e.g. \\(H_v\\)   or additional Dunham coefficients) are omitted.</li> <li>Parity/\u039b-doubling, spin-rotation, hyperfine, and electronic spin are   ignored (appropriate for a simplified ^1\u03a0\u2194^1\u03a3^+ treatment in this codebase).</li> </ul>"},{"location":"physics/#examples","title":"Examples","text":"<pre><code>from bh_spectra.constants import BH_A\nE01 = BHModel.energy(v=0, N=1, c=BH_A)\nE11 = BHModel.energy(v=1, N=1, c=BH_A)\nassert E11 &gt; E01\n</code></pre>"},{"location":"physics/#line_profile","title":"<code>line_profile</code>","text":"<p>Gaussian line profile with Doppler + instrumental broadening (FWHMs added in quadrature).</p>"},{"location":"physics/#parameters_1","title":"Parameters","text":"<p><code>x</code> : array_like     Wavelength axis in nm.</p> <p><code>wl</code> : float     Line center wavelength in nm.</p> <p><code>w_inst</code> : float     Instrumental full width at half maximum (FWHM) in nm, assumed Gaussian.</p> <p><code>T</code> : float     Translational/kinetic temperature in K for Doppler broadening.</p>"},{"location":"physics/#returns_1","title":"Returns","text":"<p>numpy.ndarray     Normalized Gaussian profile sampled on <code>x</code> (units \u2248 nm\u207b\u00b9; area \u2248 1 when integrated over <code>x</code>).</p>"},{"location":"physics/#notes_1","title":"Notes","text":"<p>The Doppler FWHM (in nm) is computed from a compact numerical form tailored to this model:</p> \\[ \\Delta\\lambda_D \\approx 7.72 \\times 10^{-5}\\; \\lambda\\, \\sqrt{\\frac{T\\,K_{2\\mathrm{eV}}}{M_{\\mathrm{BH}}}} \\] <p>where \\(\\lambda\\) is in nm, \\(K_{2\\mathrm{eV}} = 8.617\\times10^{-5}\\,\\mathrm{eV\\,K^{-1}}\\), and \\(M_{\\mathrm{BH}}\\) is the BH molecular mass in amu. This is equivalent to the standard expression</p> \\[ \\Delta\\lambda_D = \\lambda \\sqrt{\\frac{8\\ln 2\\,k_B T}{m c^2}} \\] <p>after unit conversions (nm, eV, amu). The total Gaussian FWHM is</p> \\[ \\Delta\\lambda = \\sqrt{\\Delta\\lambda_D^2 + \\Delta\\lambda_{\\mathrm{inst}}^2}, \\] <p>and the standard deviation is \\(\\sigma = \\Delta\\lambda / (2\\sqrt{2\\ln 2})\\). The returned profile is</p> \\[ g(x) = \\frac{1}{\\sqrt{2\\pi}\\,\\sigma}\\;\\exp\\!\\left[-\\frac{(x-\\lambda)^2}{2\\sigma^2}\\right]. \\] <p>Broadcasting: <code>wl</code>, <code>w_inst</code>, and <code>T</code> may be scalars or arrays broadcastable to the shape of <code>x</code>.</p>"},{"location":"physics/#examples_1","title":"Examples","text":"<pre><code>x = np.linspace(433.0, 434.0, 2001)\ng = model.line_profile(x, wl=433.5, w_inst=0.02, T=0.0)  # instrument-limited\nassert np.isfinite(g).all()\n</code></pre>"},{"location":"physics/#a_coeff","title":"<code>A_coeff</code>","text":"<p>Einstein \\(A_{ul}\\) for a single rovibronic line of the BH \\(A\\,^1\\Pi \\rightarrow X\\,^1\\Sigma^+\\) system.</p> <p>This uses band Einstein coefficients (per upper vibrational level) and H\u00f6nl\u2013London factors to apportion intensity among P/Q/R rotational branches:</p> \\[ A_{ul}(v', N_2 \\to N_1) = \\frac{A_{\\mathrm{vib}}(v') \\, H_{\\mathrm{HL}}(N_2, \\Delta N)}{2N_2 + 1}, \\] <p>with</p> \\[ \\Delta N = N_2 - N_1 \\in \\{-1,0,+1\\}, \\quad H_{\\mathrm{HL}} = \\begin{cases}     N_2/2, &amp; \\Delta N = -1 \\quad (\\text{P}) \\\\     (2N_2+1)/2, &amp; \\Delta N = 0 \\quad (\\text{Q}) \\\\     (N_2+1)/2, &amp; \\Delta N = +1 \\quad (\\text{R}) \\end{cases} \\]"},{"location":"physics/#parameters_2","title":"Parameters","text":"<p><code>v</code> : int     Upper-state vibrational quantum number \\(v'\\). Supported here: 0, 1, 2.</p> <p><code>N2</code> : int     Upper-state rotational quantum number (A-state). For singlets, \\(J = N\\).</p> <p><code>N1</code> : int     Lower-state rotational quantum number (X-state).</p>"},{"location":"physics/#returns_2","title":"Returns","text":"<p>float     Line Einstein \\(A_{ul}\\) in s\u207b\u00b9.</p>"},{"location":"physics/#notes_2","title":"Notes","text":"<ul> <li><code>A_vib[v]</code> are pre-tabulated band Einstein coefficients for   \\(A(v') \\rightarrow X\\) (units s\u207b\u00b9), and the H\u00f6nl\u2013London factors   correspond to a \\(^1\\Pi \\rightarrow {}^1\\Sigma^+\\) transition in the   Hund's case (a) limit.</li> <li>This simplified partition neglects \u039b-doubling, parity, and nuclear-spin   substructure; any additional statistical weights should be applied   elsewhere (e.g. electronic degeneracy).</li> </ul>"},{"location":"physics/#raises","title":"Raises","text":"<p>ValueError     If \\(\\Delta N \\notin \\{-1,0,+1\\}\\) or <code>v</code> is out of the supported range.</p>"},{"location":"physics/#examples_2","title":"Examples","text":"<pre><code>A = BHModel.A_coeff(v=0, N2=8, N1=7)  # R branch (\u0394N=+1)\n</code></pre>"},{"location":"physics/#spectrum","title":"<code>spectrum</code>","text":"<p>Compute the BH band spectrum on wavelength grid <code>x</code> for a single branch.</p> <p>This model uses: - Upper (emitting) A-state rovibrational energies from the parametric constants (<code>BH_A</code>); - Lower X-state only for line positions, read from the tabulated wavelengths.</p>"},{"location":"physics/#parameters_3","title":"Parameters","text":"<p><code>x</code> : ndarray     Wavelength grid in nm.</p> <p><code>C</code> : float     Population scale (absorbing other constants, path length, etc.).</p> <p><code>T_rot</code> : float     Rotational temperature (K) used in Boltzmann factor for A-state populations.</p> <p><code>w_inst</code> : float     Instrumental Gaussian FWHM (nm).</p> <p><code>T_tra</code> : float     Translational temperature (K) for Doppler broadening in <code>line_profile</code>.</p> <p><code>branch</code> : Branch     Which rotational branch to synthesize: <code>Branch.P</code>, <code>Branch.Q</code>, or <code>Branch.R</code>.</p> <p><code>v_max</code> : int, default 2     Highest upper-state vibrational level \\(v'\\) to include (inclusive).</p> <p><code>N2_max</code> : int, default 22     Highest upper-state rotational quantum number \\(N_2\\) to include (inclusive).</p>"},{"location":"physics/#returns_3","title":"Returns","text":"<p>ndarray     Spectrum on <code>x</code> (same shape), in arbitrary units.</p>"},{"location":"physics/#notes_3","title":"Notes","text":"<ul> <li>A-state physics (energies, populations) is evaluated from <code>BH_A</code> via <code>energy(...)</code>.</li> <li>X-state enters only through the tabulated line centers for the chosen <code>branch</code>.</li> <li>Per-line intensity is:   \\((h\\nu)/(4\\pi)\\,n'(v',N_2)\\,A(v',N_2\\!\\to\\!N_1)\\,g_\\lambda(x)\\),   where <code>g_\\lambda</code> is a Gaussian with Doppler+instrumental width.</li> </ul>"},{"location":"physics/#full_fit_model","title":"<code>full_fit_model</code>","text":"<p>Composite forward model for the 433 nm window: BH Q-branch (A\u2192X) + two fixed auxiliary lines + constant baseline.</p> <p>The BH A-state populations/energies are computed from parametric constants via :meth:<code>spectrum</code> (branch fixed to Q), while X-state enters only through the tabulated line centers used inside :meth:<code>spectrum</code>. Two nearby isolated features at fixed wavelengths (<code>R7</code>, <code>R8</code>) are modeled as Gaussians and added on top, plus a constant baseline.</p>"},{"location":"physics/#parameters_4","title":"Parameters","text":"<p><code>x</code> : ndarray     Wavelength grid in nm.</p> <p><code>C</code> : float     Overall population/intensity scale for the BH Q-branch.</p> <p><code>T_rot</code> : float     Rotational temperature (K) for the A-state Boltzmann factor.</p> <p><code>dx</code> : float     Rigid wavelength shift in nm applied to <code>x</code> (accounts for calibration/tilt).</p> <p><code>w_inst</code> : float     Instrumental Gaussian FWHM in nm used for line broadening.</p> <p><code>base</code> : float     Constant background offset (a.u.).</p> <p><code>I_R7</code> : float     Amplitude for the auxiliary Gaussian at \\(\\lambda_{R7}=433.64776244\\,\\mathrm{nm}\\).</p> <p><code>I_R8</code> : float     Amplitude for the auxiliary Gaussian at \\(\\lambda_{R8}=433.33500584\\,\\mathrm{nm}\\).</p>"},{"location":"physics/#returns_4","title":"Returns","text":"<p>ndarray     Modeled spectrum sampled on <code>x</code> (same shape), in arbitrary units.</p>"},{"location":"physics/#notes_4","title":"Notes","text":"<ul> <li>The BH Q-branch contribution is scaled by <code>1e8</code> internally to bring values   to a convenient numeric range for fitting; this does not change relative shapes.</li> <li>The auxiliary lines use :meth:<code>line_profile</code> with the same <code>w_inst</code> and   a translational temperature fixed to <code>0.0</code> (instrument-limited broadening).   If Doppler broadening is needed, promote <code>T_tra</code> to a parameter.</li> <li>Set <code>I_R7=I_R8=0</code> to exclude the auxiliary features.</li> </ul>"},{"location":"physics/#examples_3","title":"Examples","text":"<pre><code>y = model.full_fit_model(\n    x, C=1.2, T_rot=2100.0, dx=0.005,\n    w_inst=0.02, base=0.01, I_R7=0.3, I_R8=0.2,\n)\n</code></pre>"}]}