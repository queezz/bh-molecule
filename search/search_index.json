{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"BH Molecule","text":"<p>This project provides tools to model and fit the A\u2013X band spectra of boron hydride (BH). It began life as a set of Jupyter notebooks and has since been refactored into a Python package.</p>"},{"location":"#installation","title":"Installation","text":"<p>You can install BH Molecule locally or directly from GitHub. Both methods will make the CLI commands (<code>bh-spectra</code>, <code>bh-spectra-csv</code>, <code>bh-spectra-plot</code>) available in your terminal.</p> <p>From a cloned repository:</p> <p><pre><code>pip install .\n</code></pre> Or, fordevelopment: <pre><code>pip install -e .\n</code></pre></p> <p>See the Dev Install Guide for more details.</p> <p>Directly from GitHub:</p> <pre><code>pip install git+https://github.com/queezz/bh-molecule.git\n</code></pre> <p>After installation, try:</p> <pre><code>bh-spectra --xmin 432.8 --xmax 434.2 --points 4000 --out spectrum.npz\n</code></pre>"},{"location":"#quick-start","title":"Quick start","text":"<p>Use the Python API:</p> <p>Python example:</p> <pre><code>import numpy as np\nfrom bh_molecule.dataio import load_v00_wavelengths\nfrom bh_molecule.physics import BHModel\n\nmodel = BHModel(load_v00_wavelengths())\nx = np.linspace(432.8, 434.2, 4000)\ny = model.full_fit_model(x, C=1.0, T_rot=2000, dx=0.0, w_inst=0.02)\n</code></pre>"},{"location":"cli_commands/","title":"BH-Molecule CLI Commands","text":"<p>The BH-Molecule package provides three main command-line tools for generating, exporting, and plotting model spectra of the boron hydride (BH) A\u2013X band.</p>"},{"location":"cli_commands/#installation","title":"Installation","text":"<p>To use the commands, you need to install the package. See the Installation section.</p> <ul> <li><code>bh-spectra</code></li> <li><code>bh-spectra-csv</code></li> <li><code>bh-spectra-plot</code></li> </ul>"},{"location":"cli_commands/#common-parameters","title":"Common Parameters","text":"<p>All three commands share a set of parameters controlling the generated spectrum:</p> Parameter Type Default Description <code>--xmin</code> float 432.8 Minimum wavelength in nm <code>--xmax</code> float 434.2 Maximum wavelength in nm <code>--points</code> int 4000 Number of wavelength points <code>--C</code> float 1.0 Concentration factor <code>--T_rot</code> float 2000.0 Rotational temperature in K <code>--dx</code> float 0.0 Wavelength shift in nm <code>--w_inst</code> float 0.02 Instrumental FWHM in nm <code>--base</code> float 0.0 Baseline offset <code>--I_R7</code> float 0.5 Intensity of R\u2087 branch line <code>--I_R8</code> float 0.3 Intensity of R\u2088 branch line"},{"location":"cli_commands/#generate-spectrum-data","title":"Generate Spectrum Data","text":""},{"location":"cli_commands/#bh-spectra","title":"<code>bh-spectra</code>","text":"<p>Generates model spectrum and saves it as a compressed NumPy file (<code>.npz</code>).</p> <pre><code>bh-spectra --C 5.0 --T_rot 3500 --out spectrum.npz\n</code></pre> <p>Options:</p> <ul> <li><code>--out</code>: Output file name (default: <code>spectrum.npz</code>)</li> </ul> <p>Example:</p> <pre><code>bh-spectra --xmin 433.0 --xmax 434.0 --points 2000 --C 2.0 --T_rot 2500 --out my_spectrum.npz\n</code></pre>"},{"location":"cli_commands/#bh-spectra-csv","title":"<code>bh-spectra-csv</code>","text":"<p>Same as <code>bh-spectra</code> but outputs a CSV file instead of NumPy.</p> <pre><code>bh-spectra-csv --C 5.0 --T_rot 3500 --out spectrum.csv\n</code></pre> <p>Options:</p> <ul> <li><code>--out</code>: Output CSV filename (default: <code>spectrum.csv</code>)</li> </ul> <p>The resulting CSV will have columns:</p> <ul> <li><code>x</code> \u2014 Wavelength (nm)</li> <li><code>y</code> \u2014 Intensity (a.u.)</li> </ul>"},{"location":"cli_commands/#plot-spectrum","title":"Plot Spectrum","text":"<p>Generates and displays a spectrum plot using Matplotlib.</p> <pre><code>bh-spectra-plot --C 5.0 --T_rot 3500\n</code></pre> <p>Additional options:</p> <ul> <li><code>--save</code>: Save plot to file (e.g. <code>plot.png</code>)</li> <li><code>--dpi</code>: Resolution when saving (default: 100)</li> <li><code>--figsize</code>: Width and height in inches (default: <code>10 6</code>)</li> </ul>"},{"location":"cli_commands/#example-workflow","title":"Example Workflow","text":"<ol> <li> <p>Generate spectrum data <pre><code>bh-spectra --C 4.0 --T_rot 3200 --out data.npz\n</code></pre></p> </li> <li> <p>Export same parameters to CSV <pre><code>bh-spectra-csv --C 4.0 --T_rot 3200 --out data.csv\n</code></pre></p> </li> <li> <p>Visualize spectrum <pre><code>bh-spectra-plot --C 4.0 --T_rot 3200 --save plot.png --dpi 200\n</code></pre></p> </li> </ol>"},{"location":"cli_commands/#notes","title":"Notes","text":"<ul> <li>The BH-Spectra CLI tools are based on the BHModel class and use molecular constants loaded via <code>load_v00_wavelengths()</code>.</li> <li>Adjusting <code>C</code>, <code>T_rot</code>, and <code>w_inst</code> has the most visible effect on spectrum shape.</li> </ul>"},{"location":"dev-install-guide/","title":"Dev Environment &amp; MkDocs","text":"<p>This page is the single source of truth for setting up a local development environment for <code>bh-molecule</code> and running the docs site.</p>"},{"location":"dev-install-guide/#part-a-dev-environment","title":"Part A \u2014 Dev Environment","text":"<p>How to prepare your venv, install the package in editable mode, and set up Jupyter.</p>"},{"location":"dev-install-guide/#a1-prerequisites","title":"A1. Prerequisites","text":"<p>Python 3.10+, Git, and VS Code (recommended) or your preferred editor.  </p> <p>We isolate everything in <code>.venv/</code>.</p>"},{"location":"dev-install-guide/#a2-create-activate-venv","title":"A2. Create &amp; activate venv","text":"<p>Windows (PowerShell) <pre><code>python -m venv .venv\n.\\\\.venv\\\\Scripts\\\\Activate.ps1\npython -m pip install -U pip\n</code></pre></p> <p>macOS / Linux (bash)</p> <pre><code>python3 -m venv .venv\nsource .venv/bin/activate\npython -m pip install -U pip\n</code></pre> <p>If blocked on Windows: <code>Set-ExecutionPolicy -Scope CurrentUser RemoteSigned</code></p>"},{"location":"dev-install-guide/#a3-editable-install","title":"A3. Editable install","text":"<p>From repo root:</p> <pre><code>python -m pip install -e \".[dev]\"\n</code></pre> <p>Imports will work anywhere, and file edits are picked up automatically.</p>"},{"location":"dev-install-guide/#a4-jupyter-setup","title":"A4. Jupyter setup","text":"<p>Optional, for running notebooks in <code>examples/</code>:</p> <pre><code>python -m pip install ipykernel\npython -m ipykernel install --user --name=bh-molecule --display-name=\"bh-molecule (venv)\"\n</code></pre> <p>In VS Code, pick the bh-molecule (venv) kernel.</p>"},{"location":"dev-install-guide/#a5-git-ignore","title":"A5. Git ignore","text":"<p>Add to <code>.gitignore</code> if missing:</p> <pre><code>.venv/\nsite/\n.ipynb_checkpoints/\n</code></pre>"},{"location":"dev-install-guide/#part-b-mkdocs","title":"Part B \u2014 MkDocs","text":"<p>Steps to serve or build the docs site locally.</p>"},{"location":"dev-install-guide/#b1-install-mkdocs","title":"B1. Install MkDocs","text":"<p>If <code>.[dev]</code> already installed docs deps, skip this. Otherwise:</p> <pre><code>python -m pip install mkdocs mkdocs-material pymdown-extensions\n</code></pre>"},{"location":"dev-install-guide/#b2-local-preview","title":"B2. Local preview","text":"<pre><code>mkdocs serve\n# or preview on LAN:\nmkdocs serve -a 0.0.0.0:8000\n</code></pre>"},{"location":"dev-install-guide/#b3-build-site","title":"B3. Build site","text":"<pre><code>mkdocs build\n</code></pre> <p>Outputs to <code>./site/</code> \u2014 do not commit this.</p>"},{"location":"dev-install-guide/#b4-optional-pinned-versions","title":"B4. Optional pinned versions","text":"<pre><code>python -m pip install \\\n  mkdocs==1.6.1 mkdocs-material==9.6.16 pymdown-extensions==10.16.1\n</code></pre>"},{"location":"dev-install-guide/#troubleshooting","title":"Troubleshooting","text":"<ul> <li>MkDocs not found \u2192 Activate <code>venv</code>, or use <code>python -m mkdocs serve</code></li> <li>ImportError \u2192 Check <code>pip install -e .</code> was run in this <code>venv</code>, and correct kernel selected.</li> <li>Plugin missing \u2192 Install in <code>venv</code> and update <code>mkdocs.yml</code>.</li> <li>Port in use \u2192 Change port: <code>mkdocs serve -a 127.0.0.1:8001</code>.</li> </ul>"},{"location":"dev-install-guide/#venv-update","title":"<code>venv</code> update","text":"<p>If you need to re-install venv, VS Code might block the folder. I just close the VS Code, and close the project folder. Then I can delete <code>.vev</code>.</p> <p>Windows + VS Code note: If <code>.venv</code> is currently selected as your interpreter in VS Code, the editor will keep Python processes running in that environment. On Windows, this will lock <code>.venv\\Scripts\\python.exe</code>, preventing deletion or recreation of the venv. Before rebuilding <code>.venv</code>: 1. Switch VS Code to a different interpreter (e.g., Conda base). 2. Reload VS Code or close it. 3. Delete/recreate <code>.venv</code> as needed. 4. Switch back to <code>.venv</code> as the interpreter.</p>"},{"location":"dev-install-guide/#dropbox-and-venv","title":"Dropbox and <code>.venv</code>","text":"<p>Dropbox will try to sync <code>.venv</code> across devices, causing \u201csync conflict\u201d folders if each machine has its own environment. To keep <code>.venv</code> local only, set Dropbox\u2019s ignore attribute:</p> <ol> <li> <p>Remove any existing cloud copy</p> <ul> <li>Pause Dropbox sync.</li> <li>Delete <code>.venv</code> from the Dropbox web interface.</li> <li>Resume sync.</li> </ul> </li> <li> <p>Create or keep your local <code>.venv</code> folder     Example:</p> <pre><code>python -m venv .venv\n</code></pre> </li> <li> <p>Set the ignore attribute (PowerShell)     From your project folder:</p> <pre><code>cmd /c \"echo 1 &gt; .venv:com.dropbox.ignored\"\n</code></pre> </li> <li> <p>Verify</p> <pre><code>cmd /c \"dir /r .\"\n</code></pre> <p>You should see:</p> <pre><code>.venv:com.dropbox.ignored:$DATA\n</code></pre> </li> <li> <p>Result</p> <ul> <li><code>.venv</code> stays on this machine only.</li> <li>No cloud upload or download to other devices.</li> <li>Icon in Explorer will have a gray minus badge.</li> </ul> </li> </ol> <p>Note: If you delete and recreate <code>.venv</code>, reapply the attribute. It\u2019s stored on the folder itself, not just the name.</p>"},{"location":"dev-install-guide/#quick-daily-commands","title":"Quick daily commands","text":"<p>Windows</p> <pre><code>.\\\\.venv\\\\Scripts\\\\Activate.ps1\nmkdocs serve\n</code></pre> <p>macOS / Linux</p> <pre><code>source .venv/bin/activate\nmkdocs serve\n</code></pre>"},{"location":"physics/","title":"Physics Module","text":"<p>Documentation extracted from docstrings in <code>bh_molecule.physics</code>.</p> <p>(Auto-generated by <code>docs/generate_physics_docs.py</code>.)</p>"},{"location":"physics/#bhmodel","title":"BHModel","text":"<p>Core BH spectrum model; file I/O is done elsewhere (dataio).</p>"},{"location":"physics/#energy","title":"<code>energy</code>","text":"<p>Rovibronic term value \\(E(v,N)\\) (in cm\u207b\u00b9) for a given electronic state.</p> <p>The model uses a Dunham-like expansion truncated to cubic vibrational terms and quartic (centrifugal distortion) in rotation:</p> \\[ E(v,N) \\;=\\; T_e \\;+\\; G(v) \\;+\\; F_v(N), \\] <p>with</p> \\[ \\begin{aligned} G(v) &amp;= \\omega_e\\,(v+\\tfrac12) - \\omega_e x_e\\,(v+\\tfrac12)^2 + \\omega_e y_e\\,(v+\\tfrac12)^3, \\\\ B_v  &amp;= B_e - \\alpha_e\\,(v+\\tfrac12), \\\\ D_v  &amp;= D_e - \\beta_e\\,(v+\\tfrac12), \\\\ F_v(N) &amp;= B_v\\,N(N+1) - D_v\\,\\big[N(N+1)\\big]^2 . \\end{aligned} \\]"},{"location":"physics/#parameters","title":"Parameters","text":"<p><code>v</code> : int     Vibrational quantum number \\(v \\ge 0\\).</p> <p><code>N</code> : int     Rotational quantum number (spinless). For singlet states,     \\(J \\approx N\\); fine/\u039b-doubling and spin-rotation are neglected here.</p> <p><code>c</code> : MolecularConstants     Parameter set for the electronic state (fields in cm\u207b\u00b9):     <code>T_e, omega_e, omega_e_x_e, omega_e_y_e, B_e, alpha_e, D_e, beta_e</code>.</p>"},{"location":"physics/#returns","title":"Returns","text":"<p>float     Rovibronic term value \\(E(v,N)\\) in cm\u207b\u00b9.</p>"},{"location":"physics/#notes","title":"Notes","text":"<ul> <li>Truncation: includes up to \\((v+\\tfrac12)^3\\) in \\(G(v)\\) and   \\([N(N+1)]^2\\) in \\(F_v(N)\\). Higher-order terms (e.g. \\(H_v\\)   or additional Dunham coefficients) are omitted.</li> <li>Parity/\u039b-doubling, spin-rotation, hyperfine, and electronic spin are   ignored (appropriate for a simplified ^1\u03a0\u2194^1\u03a3^+ treatment in this codebase).</li> </ul>"},{"location":"physics/#examples","title":"Examples","text":"<pre><code>from bh_molecule.constants import BH_A\nE01 = BHModel.energy(v=0, N=1, c=BH_A)\nE11 = BHModel.energy(v=1, N=1, c=BH_A)\nassert E11 &gt; E01\n</code></pre>"},{"location":"physics/#line_profile","title":"<code>line_profile</code>","text":"<p>Gaussian line profile with Doppler + instrumental broadening (FWHMs added in quadrature).</p>"},{"location":"physics/#parameters_1","title":"Parameters","text":"<p><code>x</code> : array_like     Wavelength axis in nm.</p> <p><code>wl</code> : float     Line center wavelength in nm.</p> <p><code>w_inst</code> : float     Instrumental full width at half maximum (FWHM) in nm, assumed Gaussian.</p> <p><code>T</code> : float     Translational/kinetic temperature in K for Doppler broadening.</p>"},{"location":"physics/#returns_1","title":"Returns","text":"<p>numpy.ndarray     Normalized Gaussian profile sampled on <code>x</code> (units \u2248 nm\u207b\u00b9; area \u2248 1 when integrated over <code>x</code>).</p>"},{"location":"physics/#notes_1","title":"Notes","text":"<p>The Doppler FWHM (in nm) is computed from a compact numerical form tailored to this model:</p> \\[ \\Delta\\lambda_D \\approx 7.72 \\times 10^{-5}\\; \\lambda\\, \\sqrt{\\frac{T\\,K_{2\\mathrm{eV}}}{M_{\\mathrm{BH}}}} \\] <p>where \\(\\lambda\\) is in nm, \\(K_{2\\mathrm{eV}} = 8.617\\times10^{-5}\\,\\mathrm{eV\\,K^{-1}}\\), and \\(M_{\\mathrm{BH}}\\) is the BH molecular mass in amu. This is equivalent to the standard expression</p> \\[ \\Delta\\lambda_D = \\lambda \\sqrt{\\frac{8\\ln 2\\,k_B T}{m c^2}} \\] <p>after unit conversions (nm, eV, amu). The total Gaussian FWHM is</p> \\[ \\Delta\\lambda = \\sqrt{\\Delta\\lambda_D^2 + \\Delta\\lambda_{\\mathrm{inst}}^2}, \\] <p>and the standard deviation is \\(\\sigma = \\Delta\\lambda / (2\\sqrt{2\\ln 2})\\). The returned profile is</p> \\[ g(x) = \\frac{1}{\\sqrt{2\\pi}\\,\\sigma}\\;\\exp\\!\\left[-\\frac{(x-\\lambda)^2}{2\\sigma^2}\\right]. \\] <p>Broadcasting: <code>wl</code>, <code>w_inst</code>, and <code>T</code> may be scalars or arrays broadcastable to the shape of <code>x</code>.</p>"},{"location":"physics/#examples_1","title":"Examples","text":"<pre><code>x = np.linspace(433.0, 434.0, 2001)\ng = model.line_profile(x, wl=433.5, w_inst=0.02, T=0.0)  # instrument-limited\nassert np.isfinite(g).all()\n</code></pre>"},{"location":"physics/#a_coeff","title":"<code>A_coeff</code>","text":"<p>Einstein \\(A_{ul}\\) for a single rovibronic line of the BH \\(A\\,^1\\Pi \\rightarrow X\\,^1\\Sigma^+\\) system.</p> <p>This uses band Einstein coefficients (per upper vibrational level) and H\u00f6nl\u2013London factors to apportion intensity among P/Q/R rotational branches:</p> \\[ A_{ul}(v', N_2 \\to N_1) = \\frac{A_{\\mathrm{vib}}(v') \\, H_{\\mathrm{HL}}(N_2, \\Delta N)}{2N_2 + 1}, \\] <p>with</p> \\[ \\Delta N = N_2 - N_1 \\in \\{-1,0,+1\\}, \\quad H_{\\mathrm{HL}} = \\begin{cases}     N_2/2, &amp; \\Delta N = -1 \\quad (\\text{P}) \\\\     (2N_2+1)/2, &amp; \\Delta N = 0 \\quad (\\text{Q}) \\\\     (N_2+1)/2, &amp; \\Delta N = +1 \\quad (\\text{R}) \\end{cases} \\]"},{"location":"physics/#parameters_2","title":"Parameters","text":"<p><code>v</code> : int     Upper-state vibrational quantum number \\(v'\\). Supported here: 0, 1, 2.</p> <p><code>N2</code> : int     Upper-state rotational quantum number (A-state). For singlets, \\(J = N\\).</p> <p><code>N1</code> : int     Lower-state rotational quantum number (X-state).</p>"},{"location":"physics/#returns_2","title":"Returns","text":"<p>float     Line Einstein \\(A_{ul}\\) in s\u207b\u00b9.</p>"},{"location":"physics/#notes_2","title":"Notes","text":"<ul> <li><code>A_vib[v]</code> are pre-tabulated band Einstein coefficients for   \\(A(v') \\rightarrow X\\) (units s\u207b\u00b9), and the H\u00f6nl\u2013London factors   correspond to a \\(^1\\Pi \\rightarrow {}^1\\Sigma^+\\) transition in the   Hund's case (a) limit.</li> <li>This simplified partition neglects \u039b-doubling, parity, and nuclear-spin   substructure; any additional statistical weights should be applied   elsewhere (e.g. electronic degeneracy).</li> </ul>"},{"location":"physics/#raises","title":"Raises","text":"<p>ValueError     If \\(\\Delta N \\notin \\{-1,0,+1\\}\\) or <code>v</code> is out of the supported range.</p>"},{"location":"physics/#examples_2","title":"Examples","text":"<pre><code>A = BHModel.A_coeff(v=0, N2=8, N1=7)  # R branch (\u0394N=+1)\n</code></pre>"},{"location":"physics/#spectrum","title":"<code>spectrum</code>","text":"<p>Compute the BH band spectrum on wavelength grid <code>x</code> for a single branch.</p> <p>This model uses: - Upper (emitting) A-state rovibrational energies from the parametric constants (<code>BH_A</code>); - Lower X-state only for line positions, read from the tabulated wavelengths.</p>"},{"location":"physics/#parameters_3","title":"Parameters","text":"<p><code>x</code> : ndarray     Wavelength grid in nm.</p> <p><code>C</code> : float     Population scale (absorbing other constants, path length, etc.).</p> <p><code>T_rot</code> : float     Rotational temperature (K) used in Boltzmann factor for A-state populations.</p> <p><code>w_inst</code> : float     Instrumental Gaussian FWHM (nm).</p> <p><code>T_tra</code> : float     Translational temperature (K) for Doppler broadening in <code>line_profile</code>.</p> <p><code>branch</code> : Branch     Which rotational branch to synthesize: <code>Branch.P</code>, <code>Branch.Q</code>, or <code>Branch.R</code>.</p> <p><code>v_max</code> : int, default 2     Highest upper-state vibrational level \\(v'\\) to include (inclusive).</p> <p><code>N2_max</code> : int, default 22     Highest upper-state rotational quantum number \\(N_2\\) to include (inclusive).</p>"},{"location":"physics/#returns_3","title":"Returns","text":"<p>ndarray     Spectrum on <code>x</code> (same shape), in arbitrary units.</p>"},{"location":"physics/#notes_3","title":"Notes","text":"<ul> <li>A-state physics (energies, populations) is evaluated from <code>BH_A</code> via <code>energy(...)</code>.</li> <li>X-state enters only through the tabulated line centers for the chosen <code>branch</code>.</li> <li>Per-line intensity is:   \\((h\\nu)/(4\\pi)\\,n'(v',N_2)\\,A(v',N_2\\!\\to\\!N_1)\\,g_\\lambda(x)\\),   where <code>g_\\lambda</code> is a Gaussian with Doppler+instrumental width.</li> </ul>"},{"location":"physics/#full_fit_model","title":"<code>full_fit_model</code>","text":"<p>Composite forward model for the 433 nm window: BH Q-branch (A\u2192X) + two fixed auxiliary lines + constant baseline.</p> <p>The BH A-state populations/energies are computed from parametric constants via :meth:<code>spectrum</code> (branch fixed to Q), while X-state enters only through the tabulated line centers used inside :meth:<code>spectrum</code>. Two nearby isolated features at fixed wavelengths (<code>R7</code>, <code>R8</code>) are modeled as Gaussians and added on top, plus a constant baseline.</p>"},{"location":"physics/#parameters_4","title":"Parameters","text":"<p><code>x</code> : ndarray     Wavelength grid in nm.</p> <p><code>C</code> : float     Overall population/intensity scale for the BH Q-branch.</p> <p><code>T_rot</code> : float     Rotational temperature (K) for the A-state Boltzmann factor.</p> <p><code>dx</code> : float     Rigid wavelength shift in nm applied to <code>x</code> (accounts for calibration/tilt).</p> <p><code>w_inst</code> : float     Instrumental Gaussian FWHM in nm used for line broadening.</p> <p><code>base</code> : float     Constant background offset (a.u.).</p> <p><code>I_R7</code> : float     Amplitude for the auxiliary Gaussian at \\(\\lambda_{R7}=433.64776244\\,\\mathrm{nm}\\).</p> <p><code>I_R8</code> : float     Amplitude for the auxiliary Gaussian at \\(\\lambda_{R8}=433.33500584\\,\\mathrm{nm}\\).</p>"},{"location":"physics/#returns_4","title":"Returns","text":"<p>ndarray     Modeled spectrum sampled on <code>x</code> (same shape), in arbitrary units.</p>"},{"location":"physics/#notes_4","title":"Notes","text":"<ul> <li>The BH Q-branch contribution is scaled by <code>1e8</code> internally to bring values   to a convenient numeric range for fitting; this does not change relative shapes.</li> <li>The auxiliary lines use :meth:<code>line_profile</code> with the same <code>w_inst</code> and   a translational temperature fixed to <code>0.0</code> (instrument-limited broadening).   If Doppler broadening is needed, promote <code>T_tra</code> to a parameter.</li> <li>Set <code>I_R7=I_R8=0</code> to exclude the auxiliary features.</li> </ul>"},{"location":"physics/#examples_3","title":"Examples","text":"<pre><code>y = model.full_fit_model(\n    x, C=1.2, T_rot=2100.0, dx=0.005,\n    w_inst=0.02, base=0.01, I_R7=0.3, I_R8=0.2,\n)\n</code></pre>"}]}