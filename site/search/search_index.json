{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"BH Spectra","text":"<p>This project provides tools to model and fit the A\u2013X band spectra of boron hydride (BH). It began life as a set of Jupyter notebooks and has since been refactored into a Python package.</p>"},{"location":"#quick-start","title":"Quick start","text":"<p>Install the package in editable mode:</p> <pre><code>pip install -e .\n</code></pre> <p>Then run the command line tool:</p> <pre><code>bh-spectra --xmin 432.8 --xmax 434.2 --points 4000 --out spectrum.npz\n</code></pre> <p>Or use the Python API:</p> <pre><code>import numpy as np\nfrom bh_spectra.dataio import load_v00_wavelengths\nfrom bh_spectra.physics import BHModel\n\nv00 = load_v00_wavelengths()\nmodel = BHModel(v00)\nx = np.linspace(432.8, 434.2, 4000)\ny = model.full_fit_model(x, C=1.0, T_rot=2000, dx=0.0, w_inst=0.02,\n                         base=0.0, I_R7=0.5, I_R8=0.3)\n</code></pre>"},{"location":"#documentation","title":"Documentation","text":"<p>These files are prepared for use with MkDocs. To build the site locally:</p> <pre><code>pip install mkdocs\nmkdocs build\n</code></pre> <p>The resulting HTML can be published with GitHub Pages.</p>"},{"location":"physics/","title":"Physics API","text":"<p>Documentation extracted from docstrings in <code>bh_spectra.physics</code>.</p> <p>(Auto-generated by <code>docs/generate_physics_docs.py</code>.)</p>"},{"location":"physics/#bhmodel","title":"BHModel","text":"<p>Core BH spectrum model; file I/O is done elsewhere (dataio).</p>"},{"location":"physics/#energy","title":"energy","text":"<p>Rovibronic term value :math:<code>E(v,N)</code> (in cm\u207b\u00b9) for a given electronic state.</p> <p>The model uses a Dunham-like expansion truncated to cubic vibrational terms and quartic (centrifugal distortion) in rotation:</p> <p>.. math::     E(v,N) \\;=\\; T_e \\;+\\; G(v) \\;+\\; F_v(N),</p> <p>with</p> <p>.. math::     G(v) &amp;= \\omega_e\\,(v+\\tfrac12)\\;-\\;\\omega_e x_e\\,(v+\\tfrac12)^2\\;+\\;\\omega_e y_e\\,(v+\\tfrac12)^3, \\\\     B_v  &amp;= B_e \\;-\\; \\alpha_e\\,(v+\\tfrac12), \\qquad     D_v  =  D_e \\;-\\; \\beta_e \\,(v+\\tfrac12), \\\\     F_v(N) &amp;= B_v\\,N(N+1)\\;-\\;D_v\\,\\big[N(N+1)\\big]^2 .</p>"},{"location":"physics/#parameters","title":"Parameters","text":"<p>v : int     Vibrational quantum number :math:<code>v \\ge 0</code>. N : int     Rotational quantum number (spinless). For singlet states,     :math:<code>J \\approx N</code>; fine/\u039b-doubling and spin-rotation are neglected here. c : MolecularConstants     Parameter set for the electronic state (fields in cm\u207b\u00b9):     <code>T_e, omega_e, omega_e_x_e, omega_e_y_e, B_e, alpha_e, D_e, beta_e</code>.</p>"},{"location":"physics/#returns","title":"Returns","text":"<p>float     Rovibronic term value :math:<code>E(v,N)</code> in cm\u207b\u00b9.</p>"},{"location":"physics/#notes","title":"Notes","text":"<ul> <li>Truncation: includes up to :math:<code>(v+\\tfrac12)^3</code> in :math:<code>G(v)</code> and :math:<code>[N(N+1)]^2</code> in :math:<code>F_v(N)</code>. Higher-order terms (e.g. :math:<code>H_v</code> or additional Dunham coefficients) are omitted.</li> <li>Parity/\u039b-doubling, spin-rotation, hyperfine, and electronic spin are ignored (appropriate for a simplified ^1\u03a0\u2194^1\u03a3^+ treatment in this codebase).</li> </ul>"},{"location":"physics/#examples","title":"Examples","text":"<p>from bh_spectra.constants import BH_A E01 = BHModel.energy(v=0, N=1, c=BH_A) E11 = BHModel.energy(v=1, N=1, c=BH_A) float(E11 &gt; E01) 1</p>"},{"location":"physics/#line_profile","title":"line_profile","text":"<p>Gaussian line profile with Doppler + instrumental broadening (FWHMs added in quadrature).</p>"},{"location":"physics/#parameters_1","title":"Parameters","text":"<p>x : array_like     Wavelength axis in nm. wl : float     Line center wavelength in nm. w_inst : float     Instrumental full width at half maximum (FWHM) in nm, assumed Gaussian. T : float     Translational/kinetic temperature in K for Doppler broadening.</p>"},{"location":"physics/#returns_1","title":"Returns","text":"<p>numpy.ndarray     Normalized Gaussian profile sampled on <code>x</code> (units \u2248 nm\u207b\u00b9; area \u2248 1 when integrated over <code>x</code>).</p>"},{"location":"physics/#notes_1","title":"Notes","text":"<p>The Doppler FWHM (in nm) is computed from a compact numerical form tailored to this model:</p> <p>.. math::     \\Delta\\lambda_D \\approx 7.72 \\times 10^{-5}\\; \\lambda\\,     \\sqrt{\\frac{T\\,K_{2\\mathrm{eV}}}{M_{\\mathrm{BH}}}}</p> <p>where :math:<code>\\lambda</code> is in nm, :math:<code>K_{2\\mathrm{eV}} = 8.617\\times10^{-5}\\,\\mathrm{eV\\,K^{-1}}</code>, and :math:<code>M_{\\mathrm{BH}}</code> is the BH molecular mass in amu. This is equivalent to the standard expression</p> <p>.. math::     \\Delta\\lambda_D = \\lambda \\sqrt{\\frac{8\\ln 2\\,k_B T}{m c^2}}</p> <p>after unit conversions (nm, eV, amu). The total Gaussian FWHM is</p> <p>.. math::     \\Delta\\lambda = \\sqrt{\\Delta\\lambda_D^2 + \\Delta\\lambda_{\\mathrm{inst}}^2},</p> <p>and the standard deviation is :math:<code>\\sigma = \\Delta\\lambda / (2\\sqrt{2\\ln 2})</code>. The returned profile is</p> <p>.. math::     g(x) = \\frac{1}{\\sqrt{2\\pi}\\,\\sigma}\\;         \\exp!\\left[-\\frac{(x-\\lambda)^2}{2\\sigma^2}\\right].</p> <p>Broadcasting: <code>wl</code>, <code>w_inst</code>, and <code>T</code> may be scalars or arrays broadcastable to the shape of <code>x</code>.</p>"},{"location":"physics/#examples_1","title":"Examples","text":"<p>x = np.linspace(433.0, 434.0, 2001) g = model.line_profile(x, wl=433.5, w_inst=0.02, T=0.0)  # instrument-limited float(np.isfinite(g).all()) 1</p>"},{"location":"physics/#a_coeff","title":"A_coeff","text":"<p>Einstein :math:<code>A_{ul}</code> for a single rovibronic line of the BH :math:<code>A\\,^1\\Pi \\rightarrow X\\,^1\\Sigma^+</code> system.</p> <p>This uses band Einstein coefficients (per upper vibrational level) and H\u00f6nl\u2013London factors to apportion intensity among P/Q/R rotational branches:</p> <p>.. math::</p> <pre><code>A_{ul}(v', N_2 \\to N_1)\n= \\frac{A_{\\mathrm{vib}}(v') \\, H_{\\mathrm{HL}}(N_2, \\Delta N)}\n    {2N_2 + 1},\n</code></pre> <p>with</p> <p>.. math::</p> <pre><code>\\Delta N = N_2 - N_1 \\in \\{-1,0,+1\\}, \\quad\nH_{\\mathrm{HL}} =\n\\begin{cases}\n    N_2/2, &amp; \\Delta N = -1 \\quad (\\text{P}) \\\\\n    (2N_2+1)/2, &amp; \\Delta N = 0 \\quad (\\text{Q}) \\\\\n    (N_2+1)/2, &amp; \\Delta N = +1 \\quad (\\text{R})\n\\end{cases}\n</code></pre>"},{"location":"physics/#parameters_2","title":"Parameters","text":"<p>v : int     Upper-state vibrational quantum number :math:<code>v'</code>. Supported here: 0, 1, 2. N2 : int     Upper-state rotational quantum number (A-state). For singlets, :math:<code>J = N</code>. N1 : int     Lower-state rotational quantum number (X-state).</p>"},{"location":"physics/#returns_2","title":"Returns","text":"<p>float     Line Einstein :math:<code>A_{ul}</code> in s\u207b\u00b9.</p>"},{"location":"physics/#notes_2","title":"Notes","text":"<ul> <li><code>A_vib[v]</code> are pre-tabulated band Einstein coefficients for :math:<code>A(v') \\rightarrow X</code> (units s\u207b\u00b9), and the H\u00f6nl\u2013London factors correspond to a :math:<code>^1\\Pi \\rightarrow {}^1\\Sigma^+</code> transition in the Hund's case (a) limit.</li> <li>This simplified partition neglects \u039b-doubling, parity, and nuclear-spin substructure; any additional statistical weights should be applied elsewhere (e.g. electronic degeneracy).</li> </ul>"},{"location":"physics/#raises","title":"Raises","text":"<p>ValueError     If :math:<code>\\Delta N \\notin \\{-1,0,+1\\}</code> or <code>v</code> is out of the supported range.</p>"},{"location":"physics/#examples_2","title":"Examples","text":"<p>A = BHModel.A_coeff(v=0, N2=8, N1=7)   # R branch (\u0394N=+1) A &gt; 0 True</p>"},{"location":"physics/#spectrum","title":"spectrum","text":"<p>Compute the BH band spectrum on wavelength grid <code>x</code> for a single branch.</p> <p>This model uses: - Upper (emitting) A-state rovibrational energies from the parametric constants (<code>BH_A</code>); - Lower X-state only for line positions, read from the tabulated wavelengths.</p>"},{"location":"physics/#parameters_3","title":"Parameters","text":"<p>x : ndarray     Wavelength grid in nm. C : float     Population scale (absorbing other constants, path length, etc.). T_rot : float     Rotational temperature (K) used in Boltzmann factor for A-state populations. w_inst : float     Instrumental Gaussian FWHM (nm). T_tra : float     Translational temperature (K) for Doppler broadening in <code>line_profile</code>. branch : Branch     Which rotational branch to synthesize: <code>Branch.P</code>, <code>Branch.Q</code>, or <code>Branch.R</code>. v_max : int, default 2     Highest upper-state vibrational level :math:<code>v'</code> to include (inclusive). N2_max : int, default 22     Highest upper-state rotational quantum number :math:<code>N_2</code> to include (inclusive).</p>"},{"location":"physics/#returns_3","title":"Returns","text":"<p>ndarray     Spectrum on <code>x</code> (same shape), in arbitrary units.</p>"},{"location":"physics/#notes_3","title":"Notes","text":"<ul> <li>A-state physics (energies, populations) is evaluated from <code>BH_A</code> via <code>energy(...)</code>.</li> <li>X-state enters only through the tabulated line centers for the chosen <code>branch</code>.</li> <li>Per-line intensity is: :math:<code>(h\\nu)/(4\\pi)\\,n'(v',N_2)\\,A(v',N_2\\!\\to\\!N_1)\\,g_\\lambda(x)</code>, where <code>g_\\lambda</code> is a Gaussian with Doppler+instrumental width.</li> </ul>"},{"location":"physics/#full_fit_model","title":"full_fit_model","text":"<p>Composite forward model for the 433 nm window: BH Q-branch (A\u2192X) + two fixed auxiliary lines + constant baseline.</p> <p>The BH A-state populations/energies are computed from parametric constants via :meth:<code>spectrum</code> (branch fixed to Q), while X-state enters only through the tabulated line centers used inside :meth:<code>spectrum</code>. Two nearby isolated features at fixed wavelengths (<code>R7</code>, <code>R8</code>) are modeled as Gaussians and added on top, plus a constant baseline.</p>"},{"location":"physics/#parameters_4","title":"Parameters","text":"<p>x : ndarray     Wavelength grid in nm. C : float     Overall population/intensity scale for the BH Q-branch. T_rot : float     Rotational temperature (K) for the A-state Boltzmann factor. dx : float     Rigid wavelength shift in nm applied to <code>x</code> (accounts for calibration/tilt). w_inst : float     Instrumental Gaussian FWHM in nm used for line broadening. base : float     Constant background offset (a.u.). I_R7 : float     Amplitude for the auxiliary Gaussian at :math:<code>\\lambda_{R7}=433.64776244\\,\\mathrm{nm}</code>. I_R8 : float     Amplitude for the auxiliary Gaussian at :math:<code>\\lambda_{R8}=433.33500584\\,\\mathrm{nm}</code>.</p>"},{"location":"physics/#returns_4","title":"Returns","text":"<p>ndarray     Modeled spectrum sampled on <code>x</code> (same shape), in arbitrary units.</p>"},{"location":"physics/#notes_4","title":"Notes","text":"<ul> <li>The BH Q-branch contribution is scaled by <code>1e8</code> internally to bring values to a convenient numeric range for fitting; this does not change relative shapes.</li> <li>The auxiliary lines use :meth:<code>line_profile</code> with the same <code>w_inst</code> and a translational temperature fixed to <code>0.0</code> (instrument-limited broadening). If Doppler broadening is needed, promote <code>T_tra</code> to a parameter.</li> <li>Set <code>I_R7=I_R8=0</code> to exclude the auxiliary features.</li> </ul>"},{"location":"physics/#examples_3","title":"Examples","text":"<p>y = model.full_fit_model( ...     x, C=1.2, T_rot=2100.0, dx=0.005, ...     w_inst=0.02, base=0.01, I_R7=0.3, I_R8=0.2 ... )</p>"}]}